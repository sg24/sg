{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCntCategInitSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(filterContentInitSaga);\n\nimport { put } from 'redux-saga/effects';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nimport { updateObject } from '../../shared/utility';\nexport function fetchCntCategInitSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchCntCategInitSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n\n          if (!(action.categ && action.categ.length > 0)) {\n            _context.next = 6;\n            break;\n          }\n\n          _context.next = 4;\n          return put(actions.fetchCntCateg(_toConsumableArray(action.categ)));\n\n        case 4:\n          _context.next = 11;\n          break;\n\n        case 6:\n          _context.next = 8;\n          return axios.post('/header', {\n            categ: 'question'\n          }, {\n            headers: {\n              'data-categ': 'category'\n            }\n          });\n\n        case 8:\n          response = _context.sent;\n          _context.next = 11;\n          return put(actions.fetchCntCateg(response.data));\n\n        case 11:\n          _context.next = 15;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 13]]);\n}\nexport function filterContentInitSaga(action) {\n  var categs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, categ, filterDet, filterCnt, response;\n\n  return _regeneratorRuntime.wrap(function filterContentInitSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          categs = [];\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context2.prev = 4;\n\n          for (_iterator = _getIterator(action.content.category); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            categ = _step.value;\n            categs.push(categ.category);\n          }\n\n          _context2.next = 12;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](4);\n          _didIteratorError = true;\n          _iteratorError = _context2.t0;\n\n        case 12:\n          _context2.prev = 12;\n          _context2.prev = 13;\n\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n\n        case 15:\n          _context2.prev = 15;\n\n          if (!_didIteratorError) {\n            _context2.next = 18;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 18:\n          return _context2.finish(15);\n\n        case 19:\n          return _context2.finish(12);\n\n        case 20:\n          filterDet = updateObject(action.content, {\n            category: categs\n          });\n          filterCnt = _JSON$stringify(filterDet);\n\n          if (action.content.apply) {\n            _context2.next = 38;\n            break;\n          }\n\n          _context2.prev = 23;\n          _context2.next = 26;\n          return put(actions.filterContentStart());\n\n        case 26:\n          _context2.next = 28;\n          return axios.post('/header', {\n            filterCnt: filterCnt,\n            model: 'question'\n          }, {\n            headers: {\n              'data-categ': 'cntSearch'\n            }\n          });\n\n        case 28:\n          response = _context2.sent;\n          _context2.next = 31;\n          return put(actions.filterContent(response.data));\n\n        case 31:\n          _context2.next = 37;\n          break;\n\n        case 33:\n          _context2.prev = 33;\n          _context2.t1 = _context2[\"catch\"](23);\n          _context2.next = 37;\n          return put(actions.filterContentFail(_context2.t1));\n\n        case 37:\n          return _context2.abrupt(\"return\");\n\n        case 38:\n          _context2.next = 40;\n          return put(actions.filterPost(filterCnt));\n\n        case 40:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[4, 8, 12, 20], [13,, 15, 19], [23, 33]]);\n}","map":null,"metadata":{},"sourceType":"module"}