{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport { changeFav } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nexport function* fetchCntInitSaga(action) {\n  let model = action.fetchType === 'post' ? '/post' : action.fetchType === 'question' || action.fetchType === 'shared' ? '/question' : '/' + action.fetchType;\n  let categ = action.fetchType === 'shared' ? `shared-${action.userID}` : action.fetchType;\n\n  if (action.cntTotal > action.skipCnt) {\n    yield put(actions.fetchCntStart());\n  }\n\n  try {\n    if (action.cntTotal === 0 || action.cntTotal > action.skipCnt) {\n      let response = yield axios.post(model, null, {\n        headers: {\n          'data-categ': categ,\n          'limit': action.fetchLimit,\n          'skip': action.skipCnt\n        }\n      });\n      yield put(actions.fetchCnt(response.data.cnt, action.skipCnt, response.data.cntTotal));\n    }\n  } catch (err) {\n    yield put(actions.fetchCntFail(err));\n  }\n}\nexport function* changeFavSaga(action) {\n  let updateFav = changeFav(action.id, action.liked, action.favAdd, action.changedFav);\n  yield put(actions.changeMainFavoriteStart(updateFav.favDet.liked));\n  yield put(actions.changeFavPtStart(updateFav.favDet.id, updateFav.favDet.liked));\n\n  try {\n    let field = action.cntGrp === 'post' ? 'postID' : action.cntGrp === 'question' ? 'queID' : 'pwtID';\n    yield axios.patch('/header', {\n      id: updateFav.favDet.id,\n      model: action.cntGrp,\n      field\n    }, {\n      headers: {\n        'data-categ': 'changefavorite'\n      }\n    });\n    yield delay(500);\n    yield put(actions.changeMainFavoriteReset());\n    yield put(actions.changeFav(updateFav.updateChangeFav));\n  } catch (err) {\n    yield delay(500);\n    yield put(actions.changeMainFavoriteReset());\n    yield put(actions.changeFavPtFail());\n  }\n}\nexport function* changeCntInitSaga(action) {\n  let field = action.modelType === 'post' ? 'postID' : action.modelType === 'question' ? 'queID' : 'pwtID';\n\n  if (!action.confirm) {\n    yield put(actions.changeCntStart(action.title, action.id, action.det, action.modelType));\n    return;\n  }\n\n  if (action.det === 'addUser') {\n    yield put(actions.changeCntStart(action.title, action.id, action.det, action.modelType));\n  }\n\n  try {\n    if (action.det === 'delete') {\n      let payload = JSON.stringify({\n        id: action.id,\n        model: action.modelType,\n        field\n      });\n      yield axios.delete('/header', {\n        headers: {\n          'data-categ': `deletecnt-${payload}`\n        }\n      });\n    } else if (action.modelType === 'user') {\n      yield axios.patch('/users', {\n        id: action.id\n      }, {\n        headers: {\n          'data-categ': action.det\n        }\n      });\n    } else {\n      yield axios.patch('/header', {\n        id: action.id,\n        model: action.modelType,\n        field\n      }, {\n        headers: {\n          'data-categ': 'draftmode'\n        }\n      });\n    }\n\n    yield put(actions.changeCnt());\n    yield delay(1000);\n    yield put(actions.changeCntReset(true));\n  } catch (err) {\n    yield put(actions.changeCntFail(err));\n    yield delay(1000);\n    yield put(actions.changeCntReset(false));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}