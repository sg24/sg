{"ast":null,"code":"import axios from '../../../axios';\nlet publickey = false ? document.cookie.replace(/(?:(?:^|.*;\\s*)pushMsg\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\") : null;\n\nfunction displayConfirmNotification() {\n  return new Promise((resolve, reject) => {\n    if ('serviceWorker' in navigator) {\n      var options = {\n        body: 'You successfully subscribed to Slodge24 Notification service!',\n        icon: '/icons/sg-icon-96x96.png',\n        dir: 'ltr',\n        lang: 'en-US',\n        vibrate: [200, 100, 200, 100, 200, 100, 200],\n        requireInteraction: true,\n        badge: '/icons/sg-icon-96x96.png',\n        tag: 'confirm-notification',\n        renotify: true,\n        actions: [{\n          action: 'confirm',\n          title: 'Okay'\n        }, {\n          action: 'cancel',\n          title: 'Cancel'\n        }]\n      };\n      navigator.serviceWorker.ready.then(function (swreg) {\n        swreg.showNotification('Successfully subscribed!', options);\n        resolve();\n      });\n    } else {\n      reject();\n    }\n  });\n}\n\nfunction configurePushSub() {\n  return new Promise((resolve, reject) => {\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    var reg;\n    navigator.serviceWorker.ready.then(function (swreg) {\n      reg = swreg;\n      return swreg.pushManager.getSubscription();\n    }).then(function (sub) {\n      if (sub === null) {\n        let vapidPublicKey = publickey;\n        let convertedVapidPublicKey = urlBase64ToUint8Array(vapidPublicKey);\n        return reg.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey: convertedVapidPublicKey\n        });\n      } else {\n        return sub;\n      }\n    }).then(function (newSub) {\n      let sub = JSON.stringify(newSub);\n      return axios.post('/users', null, {\n        headers: {\n          'data-categ': `subscribe==${sub}`\n        }\n      });\n    }).then(function (res) {\n      if (res.status === 200) {\n        displayConfirmNotification().then(() => {\n          resolve();\n        });\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n\nexport function requestPermission() {\n  return new Promise((resolve, reject) => {\n    Notification.requestPermission(function (result) {\n      if (result !== 'granted') {\n        reject(result);\n      } else {\n        configurePushSub().then(() => {\n          resolve();\n        });\n      }\n    });\n  });\n}\n\nfunction urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = window.atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n\n  return outputArray;\n}","map":{"version":3,"sources":["C:/Users/g/my-sg final deploy/react/index/containers/Footer/Notification/Notification.js"],"names":["axios","publickey","document","cookie","replace","displayConfirmNotification","Promise","resolve","reject","navigator","options","body","icon","dir","lang","vibrate","requireInteraction","badge","tag","renotify","actions","action","title","serviceWorker","ready","then","swreg","showNotification","configurePushSub","reg","pushManager","getSubscription","sub","vapidPublicKey","convertedVapidPublicKey","urlBase64ToUint8Array","subscribe","userVisibleOnly","applicationServerKey","newSub","JSON","stringify","post","headers","res","status","catch","err","requestPermission","Notification","result","base64String","padding","repeat","length","base64","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt"],"mappings":"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","sourcesContent":["import axios from '../../../axios';\r\nlet publickey =  typeof window !== `undefined` ? document.cookie.replace(/(?:(?:^|.*;\\s*)pushMsg\\s*\\=\\s*([^;]*).*$)|^.*$/, \"$1\") : null;\r\n\r\nfunction displayConfirmNotification() {\r\n    return new Promise((resolve, reject) => {\r\n      if ('serviceWorker' in navigator) {\r\n        var options = {\r\n          body: 'You successfully subscribed to Slodge24 Notification service!',\r\n          icon: '/icons/sg-icon-96x96.png',\r\n          dir: 'ltr',\r\n          lang: 'en-US',\r\n          vibrate: [200, 100, 200, 100, 200, 100, 200],\r\n          requireInteraction: true,\r\n          badge: '/icons/sg-icon-96x96.png',\r\n          tag: 'confirm-notification',\r\n          renotify: true,\r\n          actions: [\r\n            { action: 'confirm', title: 'Okay' },\r\n            { action: 'cancel', title: 'Cancel' }\r\n          ]\r\n        };\r\n    \r\n        navigator.serviceWorker.ready\r\n          .then(function(swreg) {\r\n            swreg.showNotification('Successfully subscribed!', options);\r\n            resolve()\r\n          });\r\n      } else {\r\n        reject()\r\n      }\r\n    })\r\n  }\r\n  \r\n  function configurePushSub() {\r\n    return new Promise((resolve, reject) => {\r\n      if (!('serviceWorker' in navigator)) {\r\n        return;\r\n      }\r\n      var reg;\r\n      navigator.serviceWorker.ready\r\n        .then(function(swreg) {\r\n          reg = swreg;\r\n          return swreg.pushManager.getSubscription();\r\n        })\r\n        .then(function(sub) {\r\n          if (sub === null) {\r\n            let vapidPublicKey = publickey;\r\n            let convertedVapidPublicKey = urlBase64ToUint8Array(vapidPublicKey);\r\n            return reg.pushManager.subscribe({\r\n              userVisibleOnly: true,\r\n              applicationServerKey: convertedVapidPublicKey\r\n            });\r\n          } else {\r\n            return sub\r\n          }\r\n        })\r\n        .then(function(newSub) {\r\n          let sub = JSON.stringify(newSub);\r\n          return axios.post('/users', null,{headers: {'data-categ': `subscribe==${sub}`}})\r\n        })\r\n        .then(function(res) {\r\n          if (res.status === 200) {\r\n            displayConfirmNotification().then(() =>{\r\n              resolve()\r\n            });\r\n          }\r\n        })\r\n        .catch(function(err) {\r\n          reject(err)\r\n        });\r\n    })\r\n  }\r\n\r\n export function requestPermission() {\r\n  return new Promise((resolve, reject) => {\r\n    Notification.requestPermission(function(result) {\r\n      if (result !== 'granted') {\r\n        reject(result)\r\n      } else {\r\n        configurePushSub().then(() => {\r\n          resolve()\r\n        });\r\n      }\r\n    });\r\n  })\r\n }\r\n\r\n  function urlBase64ToUint8Array(base64String) {\r\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n    const base64 = (base64String + padding)\r\n      .replace(/-/g, '+')\r\n      .replace(/_/g, '/');\r\n   \r\n    const rawData = window.atob(base64);\r\n    const outputArray = new Uint8Array(rawData.length);\r\n   \r\n    for (let i = 0; i < rawData.length; ++i) {\r\n      outputArray[i] = rawData.charCodeAt(i);\r\n    }\r\n    return outputArray;\r\n  }"]},"metadata":{},"sourceType":"module"}