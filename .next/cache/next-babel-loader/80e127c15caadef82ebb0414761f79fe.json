{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport ConvItems from '../../../../components/Main/Nav/ConvItems/ConvItems';\nimport * as actions from '../../../../store/actions/index';\nimport { updateObject } from '../../../../shared/utility';\n\nclass Conversation extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      convOpt: null\n    });\n\n    _defineProperty(this, \"showUserOptHandler\", index => {\n      if (this.state.convOpt && this.state.convOpt.index === index) {\n        this.setState((prevState, props) => {\n          return {\n            convOpt: updateObject(prevState.convOpt, {\n              visible: !prevState.convOpt.visible\n            })\n          };\n        });\n        return;\n      }\n\n      const newConvOpt = {\n        visible: true,\n        index\n      };\n      this.setState({\n        convOpt: newConvOpt\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.props.onFetchConv();\n  }\n\n  render() {\n    let convs = null;\n\n    if (this.props.conv) {\n      convs = __jsx(ConvItems, {\n        convs: this.props.conv,\n        userOpt: this.showUserOptHandler,\n        showConvOpt: this.state.convOpt\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"reuse-conv\"\n    }, __jsx(\"div\", {\n      className: \"reuse-conv__title\"\n    }, __jsx(\"div\", {\n      className: \"reuse-conv__title--wrapper\"\n    }, __jsx(\"div\", null, __jsx(FontAwesomeIcon, {\n      icon: ['far', 'comment-dots'],\n      className: \"icon icon__reuse-conv--comment\"\n    })), \"Conversations\")), convs);\n  }\n\n}\n\nconst mapStateToPros = state => {\n  return {\n    conv: state.conv.conv\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchConv: () => dispatch(actions.fetchConvInit())\n  };\n};\n\nexport default connect(mapStateToPros, mapDispatchToProps)(Conversation);","map":null,"metadata":{},"sourceType":"module"}