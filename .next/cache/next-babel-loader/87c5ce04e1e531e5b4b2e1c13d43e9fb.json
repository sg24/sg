{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport * as actions from '../../../store/actions/index';\nimport NotifyItems from '../../../components/Navigation/NotifyItems/NotifyItems';\nimport Loader from '../../../components/UI/Loader/Loader';\nimport NoAcc from '../../../components/Main/NoAcc/NoAcc';\n\nclass NavigationNotify extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      show: false,\n      showNotify: false,\n      default: false\n    });\n\n    _defineProperty(this, \"showNotifyTipHandler\", () => {\n      if (!this.state.showNotify) {\n        this.setState({\n          show: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"hidNotifyTipHandler\", () => {\n      this.setState({\n        show: false\n      });\n    });\n\n    _defineProperty(this, \"fetchNotifyHandler\", () => {\n      this.props.onFetchNotify();\n      this.setState((prevState, props) => {\n        return {\n          show: false,\n          default: false,\n          showNotify: !prevState.showNotify\n        };\n      });\n    });\n\n    _defineProperty(this, \"changeFavoriteHandler\", notifyID => {\n      this.props.onChangeFav(this.props.notify, notifyID);\n    });\n  }\n\n  componentDidMount() {\n    this.props.onFetchNotifyActive();\n  }\n\n  componentDidUpdate() {\n    if (this.state.showNotify && !this.state.default && this.props.hidNotify) {\n      this.setState({\n        default: true,\n        show: false,\n        showNotify: false\n      });\n      this.props.onDefaultNotifyactive();\n    }\n  }\n\n  render() {\n    let notifyTipClass = [\"site-header__tool-tip site-header__tool-tip--notify\"];\n    let notify = null;\n    let notifyCntClass = [\"site-header__menu--notify__cnt\"];\n    let notifyActiveCnt = null;\n\n    if (this.props.notifyActive && this.props.notifyActive > 0) {\n      notifyActiveCnt = __jsx(\"div\", {\n        className: \"active__main active__main--header site-header__menu--notify__num\"\n      }, __jsx(\"div\", null, this.props.notifyActive));\n    }\n\n    if (this.state.show) {\n      notifyTipClass.push(\"site-header__tool-tip--notify__visible\");\n    }\n\n    if (this.state.showNotify) {\n      notifyCntClass.push(\"site-header__menu--notify__cnt--visible\");\n      notify = __jsx(Loader, null);\n    }\n\n    if (this.props.notify && this.props.notify.length < 1 && this.state.showNotify) {\n      notifyCntClass.push(\"site-header__menu--notify__cnt--visible\");\n      notify = __jsx(NoAcc, {\n        isAuth: this.props.status,\n        det: \"No Notification found!\",\n        icn: \"bell\",\n        isNotify: true\n      });\n    }\n\n    if (this.props.notify && this.props.notify.length > 0 && this.state.showNotify) {\n      notify = __jsx(NotifyItems, {\n        content: this.props.notify,\n        fav: this.changeFavoriteHandler\n      });\n      notifyCntClass.push(\"site-header__menu--notify__cnt--visible\");\n    }\n\n    return __jsx(\"div\", {\n      className: \"site-header__menu--notify\"\n    }, notifyActiveCnt, __jsx(\"div\", {\n      className: \"site-header__menu--notify__icn\",\n      onMouseEnter: this.showNotifyTipHandler,\n      onMouseLeave: this.hidNotifyTipHandler,\n      onClick: this.fetchNotifyHandler\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fas', 'bell'],\n      className: \"icon icon__site-header--bell\"\n    })), __jsx(\"div\", {\n      className: notifyTipClass.join(' ')\n    }, \"Notifications\"), __jsx(\"div\", {\n      className: notifyCntClass.join(' ')\n    }, __jsx(\"div\", {\n      className: \"site-header__menu--notify__cnt--det\"\n    }, __jsx(\"div\", {\n      className: \"reuse-trd\"\n    }, __jsx(\"div\", {\n      className: \"reuse-trd__cnt reuse-trd__cnt--notify\"\n    }, notify)))));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    status: state.auth.status,\n    notify: state.header.notify,\n    notifyStart: state.header.notifyStart,\n    notifyErr: state.header.notifyErr,\n    hidNotify: state.header.hidNotify,\n    notifyActive: state.header.notifyActive\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchNotify: () => dispatch(actions.fetchNotifyInit()),\n    onChangeFav: (notify, notifyID) => dispatch(actions.changeFavNotifyInit(notify, notifyID)),\n    onFetchNotifyActive: () => dispatch(actions.fetchNotifyactiveInit()),\n    onDefaultNotifyactive: () => dispatch(actions.defaultNotifyactiveInit())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavigationNotify);","map":null,"metadata":{},"sourceType":"module"}