#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config()
var {app} = require('../server');
var debug = require('debug')('node-rest:server');
var http = require('http');
const global = require('../global/global');
const socketIO = require('socket.io');

const next = require('next')
const dev = process.env.NODE_ENV !== 'production'
const nextApp = next({ dev })
const handle = nextApp.getRequestHandler()


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);


nextApp.prepare().then(() => {
  global.app = nextApp;

  let appRoutes = require('../routes/app');
  let usersRoutes = require('../routes/users');
  let userchatRoutes = require('../routes/userchat');
  let formRoutes = require('../routes/form');
  let sitemapxmlRoute = require('../routes/sitemapxml');
  let feedRoute = require('../routes/feed');
  let feedchatRoute = require('../routes/feedchat');
  let questionRoute = require('../routes/question');
  let questionchatRoute = require('../routes/questionchat');
  let writeupRoute = require('../routes/writeup');
  let writeupchatRoute = require('../routes/writeupchat');
  let favoriteRoute = require('../routes/favorite');
  let profileRoute = require('../routes/profile');
  let viewRoute = require('../routes/view');
  let shareRoute = require('../routes/share');
  let mediaRoute = require('../routes/media');
  let mediachatRoute = require('../routes/mediachat');
  let groupRoute = require('../routes/group');
  let grouppreviewRoute = require('../routes/grouppreview');
  let groupformRoute = require('../routes/group/form');
  let grouppostRoute = require('../routes/group/post');
  let chatRoute = require('../routes/chat');
  let convRoute = require('../routes/conv');
  let advertRoute = require('../routes/advert');
  let advertchatRoute = require('../routes/advertchat');
  let postRoute = require('../routes/post');
  let postchatRoute = require('../routes/postchat');
  let contestRoute = require('../routes/contest');
  let qchatRoute = require('../routes/qchat');
  let cbtchatRoute = require('../routes/cbtchat');
  let examtabRoute = require('../routes/examtab');
  let robotonlyRoute = require('../routes/robot');

  app.use('/', [appRoutes, formRoutes, groupformRoute, profileRoute, viewRoute]);
  app.use('/users', usersRoutes);
  app.use('/userchat', userchatRoutes);
  app.use('/feed', feedRoute);
  app.use('/feedchat', feedchatRoute);
  app.use('/question', questionRoute);
  app.use('/questionchat', questionchatRoute);
  app.use('/writeup', writeupRoute);
  app.use('/writeupchat', writeupchatRoute);
  app.use('/favorite', favoriteRoute);
  app.use('/share', shareRoute);
  app.use('/media', mediaRoute);
  app.use('/mediachat', mediachatRoute);
  // app.use('/chatRoom', groupRoute);
  app.use('/group', groupRoute);
  app.use('/groupPreview', grouppreviewRoute);
  app.use('/grouppost', grouppostRoute);
  app.use('/robotonly', robotonlyRoute);
  app.use('/chat', chatRoute);
  app.use('/conv', convRoute);
  app.use('/post', postRoute);
  app.use('/postchat', postchatRoute);
  app.use('/advert', advertRoute);
  app.use('/advertchat', advertchatRoute);
  app.use('/contest', contestRoute);
  app.use('/cbt', qchatRoute);
  app.use('/cbtchat', cbtchatRoute);
  app.use('/exam', examtabRoute);
  app.use('/sitemap.xml', sitemapxmlRoute);
  app.use(function (req, res, next) {
      return res.redirect('/index/user');
  });
  
  app.all('*', (req, res) => {
    return handle(req, res)
  })

  var server = http.createServer(app);
  global.io = socketIO(server, {
    cors: {
      origin: "http://localhost:19006",
    }
  });

  server.listen(port, () => {
    console.log('started', port)
  });
  server.on('error', onError);
  server.on('listening', onListening);
  
  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }

  require('../socket/socket');
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}



// #!/usr/bin/env node

// /**
//  * Module dependencies.
//  */

// var {app} = require('../server');
// var debug = require('debug')('node-rest:server');
// var http = require('http');
// const global = require('../global/global');
// const socketIO = require('socket.io');

// /**
//  * Get port from environment and store in Express.
//  */

// var port = normalizePort(process.env.PORT || '3002');
// app.set('port', port);

// /**
//  * Create HTTP server.
//  */

// var server = http.createServer(app);
// global.io = socketIO(server);
// /**
//  * Listen on provided port, on all network interfaces.
//  */

// server.listen(port, () => {
//   console.log('started', port)
// });
// server.on('error', onError);
// server.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }

// require('../socket/socket');
