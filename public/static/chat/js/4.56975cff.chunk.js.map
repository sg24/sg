{"version":3,"sources":["components/Main/GroupContents/GroupContent/GroupContent.js","components/Main/GroupContents/GroupContents.js","containers/SiteMain/MainContent/Main/Groups/Groups.js"],"names":["chat","props","groupImage","react_default","a","createElement","react_avatar_es","name","cnt","title","size","round","notify","image","length","src","concat","window","location","protocol","host","id","alt","className","href","_id","lastChat","transformNumber","online","offline","chats","arraySort","cnts","reverse","map","index","GroupContent_GroupContent","key","Groups","state","err","inputValue","_this","match","params","categ","groups","closeModelBackdropHandler","onCloseBackdrop","history","push","filterGroupHandler","event","setState","target","value","onFilterGroup","these","this","createChat","then","res","onFetchGroup","catch","onTypingErr","filterGrp","JSON","stringify","grpCnt","Loader","grp","GroupContents","onClick","index_es","icon","type","placeholder","onChange","grpErr","Backdrop","component","Modal","close","Component","withRouter","connect","dispatch","actions","filterContent"],"mappings":"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","file":"static/js/4.56975cff.chunk.js","sourcesContent":["import React from 'react';\r\nimport Avatar from 'react-avatar';\r\n\r\nimport './GroupContent.css';\r\nimport { transformNumber } from '../../../../shared/utility'\r\n\r\nconst chat = props => {\r\n    let groupImage = <Avatar name={props.cnt.title} size='50' round />;\r\n    let notify = null;\r\n    if (props.cnt.image && props.cnt.image.length > 0) {\r\n        groupImage = <img src={`${window.location.protocol + '//' + window.location.host}/media/image/${props.cnt.image[0].id}`} alt=\"group\" />\r\n    }\r\n    if (props.cnt.notify && props.cnt.notify !== 0) {\r\n        notify = <div className=\"active__main active__main--chat-cnt\"><div>{ props.cnt.notify }</div></div>\r\n    }\r\n    return (\r\n        <div className=\"reuse-grp-chat\">\r\n            { notify }\r\n            <div className=\"reuse-grp-chat__img\">\r\n                { groupImage }\r\n            </div>\r\n            <ul className=\"reuse-grp-chat__det\">\r\n                <li className=\"reuse-grp-chat__det--title\">\r\n                    <a href={`/chat/group/${ props.cnt._id }`}>\r\n                        { props.cnt.title }\r\n                    </a>\r\n                </li>\r\n                <li className=\"reuse-grp-chat__det--last-msg\">{ props.cnt.lastChat } </li>\r\n                <li className=\"reuse-grp-chat__det--status\">\r\n                    <div className=\"reuse-grp-chat__det--status__on\"> Online \r\n                    <div> { transformNumber(props.cnt.online) }</div></div> \r\n                    <div className=\"reuse-grp-chat__det--status__off\"> offline \r\n                    <div>{ transformNumber(props.cnt.offline) }</div></div> \r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default chat;","import React from 'react';\r\nimport arraySort from 'array-sort';\r\n\r\nimport GroupContent from './GroupContent/GroupContent';\r\n\r\nconst chats = props => {\r\n    let content= arraySort(props.cnts, 'groupCreated', {reverse: true});\r\n    let allChat = content.map((cnt, index) => (\r\n        <GroupContent \r\n            key={index}\r\n            cnt={cnt}/>\r\n    ))\r\n\r\n    return allChat;\r\n}\r\n\r\nexport default chats;","import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './Groups.css';\r\nimport * as actions from '../../../../../store/actions/index';\r\nimport Loader from '../../../../../components/UI/Loader/Loader';\r\nimport GroupContent from '../../../../../components/Main/GroupContents/GroupContents';\r\nimport Backdrop from '../../../../../components/UI/Backdrop/Backdrop';\r\nimport Modal from '../../../../../components/UI/Modal/Modal';\r\nimport { createChat } from '../../../../../shared/utility';\r\n\r\nclass Groups extends Component {\r\n    state = {\r\n        err: null,\r\n        inputValue: '',\r\n        id: this.props.match.params.id,\r\n        categ: this.props.match.params.categ,\r\n        groups: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        let these = this;\r\n        createChat(`/chat/${this.state.categ}/${this.state.id}`, \r\n            'allgroup', {}).then(res => {\r\n                these.props.onFetchGroup(res)\r\n        }).catch(err => {\r\n            these.props.onTypingErr(err)\r\n        })\r\n    }\r\n\r\n\r\n    componentDidUpdate(props, state) {\r\n        if (!this.props.filterGrp && this.props.groups && (JSON.stringify(this.props.groups) !== JSON.stringify(this.state.groups))) {\r\n            this.setState({groups: this.props.groups})\r\n        }\r\n\r\n        if (this.props.filterGrp && JSON.stringify(this.props.filterGrp) !== JSON.stringify(this.state.groups)) {\r\n            this.setState({groups: this.props.filterGrp})\r\n        }\r\n    }\r\n\r\n    closeModelBackdropHandler = () => {\r\n        this.props.onCloseBackdrop()\r\n        this.props.history.push(`/chat/${this.state.categ}/${this.state.id}`)\r\n    }\r\n\r\n    filterGroupHandler = (event) => {\r\n        this.setState({inputValue: event.target.value})\r\n        this.props.onFilterGroup(event.target.value)\r\n    } \r\n\r\n    render() {\r\n        let grpCnt =<Loader />\r\n        let grp = null;\r\n        if (this.props.groups){\r\n            grpCnt = <GroupContent \r\n                cnts={this.state.groups}/>\r\n        }\r\n\r\n        grp = (\r\n            <div className=\"site-main__chat--grp__wrapper\">\r\n                <div className=\"site-main__chat--grp__close\">\r\n                    <h4>My Groups</h4>\r\n                    <div \r\n                        className=\"site-main__chat--grp__close--wrapper\"\r\n                        onClick={this.closeModelBackdropHandler}>\r\n                        <FontAwesomeIcon icon={['fas', 'times']} className=\"icon icon__site-main--chat__close\"/>\r\n                    </div>\r\n                </div>\r\n                <input \r\n                    type=\"text\" \r\n                    className=\"site-main__chat--grp__input\" \r\n                    placeholder=\"Enter group name...\"\r\n                    onChange={this.filterGroupHandler}\r\n                    value={this.state.inputValue}/>\r\n                <div className=\"site-main__chat--grp__cnt\">\r\n                    { grpCnt }\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n        if (this.props.grpErr || this.state.err){\r\n            grp = (\r\n                <Backdrop \r\n                    component={ Modal }\r\n                    close={this.closeModelBackdropHandler}\r\n                    err={ this.props.grpErr || this.state.err } />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"site-main__chat--grp\">\r\n                { grp }\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        groups: state.cnt.groups,\r\n        grpErr: state.cnt.grpErr,\r\n        filterGrp: state.cnt.filterGrp\r\n    };\r\n }\r\n\r\n const mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCloseBackdrop: () => dispatch(actions.closeBackdrop()),\r\n        onFilterGroup: (filterContent) => dispatch(actions.filterGroup(filterContent)),\r\n        onFetchGroup: (grp) => dispatch(actions.fetchGroup(grp))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Groups)); "],"sourceRoot":""}