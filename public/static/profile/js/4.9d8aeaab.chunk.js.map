{"version":3,"sources":["containers/SiteMain/MainContent/Model/AddImage/MediaItem/MediaItem.js","containers/SiteMain/MainContent/Model/AddImage/AddImage.js"],"names":["cropper","React","createRef","mediaItem","state","url","cropHandler","current","getCroppedCanvas","imageSmoothingQuality","toBlob","blob","window","URL","createObjectURL","_this","setState","props","onImageChange","preview","this","react_default","a","createElement","src","alt","className","react_cropper_default","ref","guides","cropBoxResizable","minCropBoxHeight","minCropBoxWidth","dragMode","ready","setCropBoxData","width","height","crop","Component","connect","dispatch","image","actions","videoRef","AddImage","inputValue","mediaUrl","err","startCapture","linkVerifyHandler","event","target","value","onCheckLink","srcObject","getVideoTracks","forEach","track","stop","openCameraHandler","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","Error","these","Object","assertThisInitialized","video","then","stream","catch","captureImageHandler","getImageURL","imageData","imageFile","dataURLtoBlob","selectMediaHandler","snapshotErr","stopPropagation","preventDefault","files","handleFiles","dragEnterMediaHandler","dragOverMediaHandler","dropMediaHandler","dataTransfer","file","type","startsWith","submitMediaHandler","profileImage","onSubmitImage","imageUrl","match","params","id","closeMediaBoxHandler","onChangeImage","linkValid","onResetLink","mediaPreview","mediaAddedViewer","streamVideoCLass","captureBtn","message","MediaItem","push","onClick","index_es","icon","name","placeholder","onChange","spellCheck","pattern","onDragEnter","onDragOver","onDrop","accept","autoPlay","join","disabled","startUpload","withRouter","cnt","imageLink","userID"],"mappings":"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","file":"static/js/4.9d8aeaab.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport { connect } from 'react-redux';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\nimport * as actions from '../../../../../../store/actions/index';\r\n\r\nconst cropper = React.createRef(null);\r\nclass mediaItem extends Component {\r\n    state= {\r\n        url: null\r\n    };\r\n\r\n    cropHandler = () => {\r\n        cropper.current.cropper.getCroppedCanvas({ imageSmoothingQuality: 'high'}).toBlob((blob) => {\r\n            if (blob) {\r\n                let url = window.URL.createObjectURL(blob);\r\n                this.setState({url})\r\n                this.props.onImageChange(blob, url)\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n  render() {\r\n      let preview = null\r\n      if (this.state.url) {\r\n        preview = (\r\n            <img src={this.state.url} alt=\"\" className=\"reuse-form__itm--det__view-select--media__wrapper--preview \"/>\r\n        )\r\n      }\r\n\r\n    return (\r\n        <div className=\"reuse-form__itm--det__view-select--media\">\r\n            <div className=\"reuse-form__itm--det__view-select--media__wrapper\">\r\n            { preview }\r\n            <Cropper\r\n                ref={cropper}\r\n                src={this.props.url}\r\n                className=\"reuse-form__itm--det__view-select--media__wrapper--cnt\"\r\n                guides={false}\r\n                cropBoxResizable={false}\r\n                minCropBoxHeight={100}\r\n                minCropBoxWidth={100}\r\n                dragMode=\"none\"\r\n                ready={() => {\r\n                    cropper.current.cropper.setCropBoxData({width: 100, height: 100});\r\n                }}\r\n                crop={this.cropHandler} />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onImageChange: (image, url) => dispatch(actions.changePrfImage(image, url))\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(mediaItem);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {  withRouter } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nimport './AddImage.css';\r\nimport * as actions from '../../../../../store/actions/index';\r\nimport MediaItem from './MediaItem/MediaItem';\r\nimport { getImageURL, dataURLtoBlob } from '../../../../../shared/utility';\r\n\r\nconst videoRef = React.createRef(null);\r\n\r\nclass AddImage extends Component {\r\n    state = {\r\n        inputValue: '',\r\n        mediaUrl: null,\r\n        err: null,\r\n        startCapture: false\r\n    };\r\n\r\n    linkVerifyHandler = (event) => {\r\n        let inputValue =  event.target.value;\r\n        this.setState({inputValue});\r\n        this.props.onCheckLink(inputValue);\r\n        if (this.state.startCapture) {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n          this.setState({startCapture: false});\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.linkValid && !this.props.linkValid.err) {\r\n            this.setState({mediaUrl: this.state.inputValue});\r\n            this.props.onResetLink()\r\n        }\r\n    }\r\n\r\n    openCameraHandler = () => {\r\n        if (!('mediaDevices' in navigator)) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        \r\n        if (!('getUserMedia' in navigator.mediaDevices)) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n            var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        \r\n            if (!getUserMedia) {\r\n                return Promise.reject(new Error('getUserMedia is not implemented!'));\r\n            }\r\n        \r\n            return new Promise(function(resolve, reject) {\r\n                getUserMedia.call(navigator, constraints, resolve, reject);\r\n            });\r\n            }\r\n        }\r\n        let these = this;\r\n        navigator.mediaDevices.getUserMedia({video: true})\r\n            .then(function(stream) {\r\n                videoRef.current.srcObject= stream;\r\n                these.setState({startCapture: true, mediaUrl: null})\r\n            })\r\n            .catch(function(err) {\r\n                these.setState({err, startCapture: false})\r\n            });\r\n    }\r\n\r\n    captureImageHandler = () => {\r\n        getImageURL(videoRef.current).then(imageData => {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                  track.stop();\r\n            });\r\n            let imageFile = dataURLtoBlob(imageData);\r\n            let url = window.URL.createObjectURL(imageFile)\r\n            this.setState({mediaUrl: url, startCapture: false})\r\n        }).catch(err => {\r\n            this.setState({err})\r\n        })\r\n    }\r\n\r\n    selectMediaHandler = (event) => {\r\n        this.setState({snapshotErr: null});\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (event.target.files) {\r\n            const files = event.target.files;\r\n            this.handleFiles(files)\r\n        }\r\n    }\r\n\r\n    dragEnterMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    dragOverMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    dropMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (event.dataTransfer) {\r\n            const dt = event.dataTransfer;\r\n            const files = dt.files;\r\n            this.handleFiles(files)\r\n        }\r\n    }\r\n\r\n    handleFiles = (files) => {\r\n        if (this.state.startCapture) {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n          this.setState({startCapture: false});\r\n        }\r\n        const file = files[0];\r\n        if(file.type.startsWith('image/')) {\r\n            let url = window.URL.createObjectURL(file)\r\n            this.setState({mediaUrl: url})\r\n        }\r\n    }\r\n\r\n    submitMediaHandler = () => {\r\n        if (this.props.profileImage) {\r\n            this.props.onSubmitImage(this.props.profileImage, this.props.imageUrl, this.props.match.params.id);\r\n        }\r\n    }\r\n\r\n    closeMediaBoxHandler = () => {\r\n        this.props.onChangeImage();\r\n    }\r\n\r\n\r\n    render() {\r\n        let mediaPreview = null;\r\n        let mediaAddedViewer = null;\r\n        let streamVideoCLass = [\"reuse-form__itm--det__view-select--media__wrapper--video\"];\r\n        let captureBtn = null;\r\n\r\n        if (this.props.linkValid || this.state.err) {\r\n            mediaPreview = this.props.linkValid && this.props.linkValid.err ?\r\n            <div className=\"reuse-form__err\">{ this.props.linkValid.err.message}</div> : \r\n            this.state.err ? <div className=\"reuse-form__err\">{ this.state.err.message }</div> : null\r\n        }\r\n        if (this.state.mediaUrl) {\r\n            mediaAddedViewer = (\r\n                <div className=\"reuse-form__itm--det__view-select\">\r\n                    <MediaItem\r\n                       url={this.state.mediaUrl }/>\r\n                </div>\r\n            ); \r\n        }\r\n\r\n        if (!this.state.err && this.state.startCapture) {\r\n            streamVideoCLass.push('reuse-form__itm--det__view-select--media__wrapper--video__show');\r\n            captureBtn = (\r\n                <div className=\"reuse-form__itm--footer reuse-form__btn\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"reuse-form__btn--add\"\r\n                    onClick={this.captureImageHandler}>Capture</button>\r\n            </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"reuse-form__itm\">\r\n                <h4 className=\"reuse-form__itm--title\">\r\n                    <FontAwesomeIcon \r\n                        icon={['fas', 'image']}\r\n                        className=\"icon icon__reuse-form--itm--title\" />\r\n                  Change Profile Image\r\n                </h4>\r\n                <div className=\"reuse-form__itm--det\">\r\n                    <div className=\"reuse-form__cnt\">\r\n                        <label className=\"reuse-form__cnt--title\">Image Link</label>\r\n                        <div className=\"reuse-form__cnt--det\">\r\n                            <input \r\n                                type=\"url\" \r\n                                name=\"\" \r\n                                className=\"reuse-form__cnt--det__input reuse-form__cnt--det__input--lg\" \r\n                                placeholder=\"paste link\"\r\n                                onChange={this.linkVerifyHandler}\r\n                                value={this.state.inputValue}\r\n                                spellCheck={false}\r\n                                pattern=\"https://.*\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"reuse-form__itm--det__view\">\r\n                        { mediaPreview }\r\n                    </div>\r\n                    <div className=\"reuse-form__itm--det__alt\">\r\n                        OR\r\n                    </div>\r\n                    <div \r\n                        className=\"reuse-form__itm--det__camera\"\r\n                        onClick={this.openCameraHandler}>\r\n                        <FontAwesomeIcon \r\n                            icon={['fas', 'camera']}\r\n                            className=\"icon icon__reuse-form--itm--camera\" />\r\n                        Take Snapshot \r\n                    </div>\r\n                    <div className=\"reuse-form__cnt\">\r\n                        <div className=\"reuse-form__cnt--det\">\r\n                            <div className=\"reuse-form__cnt--det__fil\">\r\n                                Upload Image\r\n                                <input \r\n                                    type=\"file\" \r\n                                    name=\"\"\r\n                                    className=\"reuse-form__cnt--det__fil--input\"\r\n                                    onChange={this.selectMediaHandler}\r\n                                    onDragEnter={this.dragEnterMediaHandler}\r\n                                    onDragOver={this.dragOverMediaHandler}\r\n                                    onDrop={this.dropMediaHandler}\r\n                                    accept=\"image/*\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <video \r\n                        ref={videoRef}\r\n                        autoPlay\r\n                        className={streamVideoCLass.join(' ')}>\r\n                        <p>our browser doesn't support embedded videos</p>\r\n                    </video>\r\n                    { captureBtn }\r\n                    { this.state.snapshotErr ? \r\n                        <div className=\"reuse-form__err\">Some features are not available in your browser, { this.state.snapshotErr }</div> : null}\r\n                    { mediaAddedViewer }\r\n                </div>\r\n                <div className=\"reuse-form__itm--footer reuse-form__btn\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"reuse-form__btn--close\"\r\n                        onClick={this.closeMediaBoxHandler}>Exit</button>\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"reuse-form__btn--add\"\r\n                        disabled={!this.props.profileImage || this.props.startUpload || this.state.startCapture}\r\n                        onClick={this.submitMediaHandler}>Change</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        linkValid: state.cnt.linkValid,\r\n        profileImage: state.cnt.profileImage,\r\n        imageUrl: state.cnt.imageUrl,\r\n        startUpload: state.cnt.startUpload\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCheckLink: (imageLink) => dispatch(actions.checkLinkInit(imageLink, 'image')),\r\n        onResetLink: () => dispatch(actions.resetLink()),\r\n        onSubmitImage: (image, url, userID) => dispatch(actions.submitImageInit(image, url, userID)),\r\n        onChangeImage: () => dispatch(actions.changeImage())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AddImage))"],"sourceRoot":""}