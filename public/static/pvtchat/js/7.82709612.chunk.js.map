{"version":3,"sources":["containers/SiteMain/MainContent/Main/ChatInput/VideoRec/VideoRec.js"],"names":["videoRef","React","createRef","VideoCam","state","start","mediaRecorder","id","_this","props","match","params","categ","err","stopRecHandler","webCameraApi","socket","video","audio","then","media","setState","onUploadMedia","history","goBack","catch","_this2","this","current","srcObject","stream","getTracks","forEach","track","stop","cnt","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","_components_UI_Loader_Loader__WEBPACK_IMPORTED_MODULE_11__","bg","_components_UI_Backdrop_Backdrop__WEBPACK_IMPORTED_MODULE_12__","component","Modal","close","closeModelBackdropHandler","className","ref","autoPlay","onClick","disabled","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_5__","icon","Component","withRouter","connect","vidRecBackdrop","dispatch","onTypingErr","actions"],"mappings":"mPAYIA,EAAWC,IAAMC,UAAU,MACzBC,8MACFC,MAAQ,CACJC,OAAO,EACPC,cAAe,KACfC,GAAIC,EAAKC,MAAMC,MAAMC,OAAOJ,GAC5BK,MAAOJ,EAAKC,MAAMC,MAAMC,OAAOC,MAC/BC,IAAK,QAoBTC,eAAiB,WACbC,YAAaC,IAAQR,EAAKJ,MAAME,cAAeE,EAAKJ,MAAMC,MAAO,CAACY,OAAO,EAAMC,OAAO,GAClF,YAAa,MAAM,QAAS,mBAAmBC,KAAK,SAAAC,GACpDZ,EAAKa,SAAS,CAACf,cAAe,KAAMD,OAAO,IAC3CG,EAAKC,MAAMa,cAAcF,EAAOZ,EAAKJ,MAAMG,GAAIC,EAAKJ,MAAMQ,OAC1DJ,EAAKC,MAAMc,QAAQC,WACpBC,MAAM,SAAAZ,GACLL,EAAKa,SAAS,CAAChB,OAAO,yEAxBV,IAAAqB,EAAAC,KAChBZ,YAAaC,IAAQW,KAAKvB,MAAME,cAAeqB,KAAKvB,MAAMC,MAAO,CAACY,OAAO,EAAMC,OAAO,GAClF,YAAa,MAAM,QAAS,mBAAmBC,KAAK,SAAAC,GACxDpB,EAAS4B,QAAQC,UAAYT,EAAMU,OACnCJ,EAAKL,SAAS,CAACf,cAAec,EAAMd,cAAeD,OAAO,MACvDoB,MAAM,SAAAZ,GACLa,EAAKL,SAAS,CAAChB,OAAO,EAAOQ,yDAK7Bc,KAAKvB,MAAME,eACXqB,KAAKvB,MAAME,cAAcwB,OAAOC,YAAYC,QAAS,SAAAC,GAAK,OACtDA,EAAMC,0CAgBd,IAAIC,EAAMC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACVC,IAAE,IACE3B,EAAM,KAgBV,OAdIc,KAAKvB,MAAMC,QACX8B,EAAM,MAGNR,KAAKvB,MAAMS,MACXA,EACIuB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,UAAYC,IACZC,MAAOjB,KAAKkB,0BACZhC,IAAOc,KAAKvB,MAAMS,IAClBO,OAAK,KAKjBgB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,2BACTjC,EACFuB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,oCACVX,EACDC,EAAAC,EAAAC,cAAA,SACIS,IAAK/C,EACLgD,UAAQ,EACRF,UAAU,2CACVV,EAAAC,EAAAC,cAAA,yDAEJF,EAAAC,EAAAC,cAAA,UACIW,QAAStB,KAAKb,eACdgC,UAAU,mCACVI,UAAWvB,KAAKvB,MAAMC,OACtB+B,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAiBC,KAAM,CAAC,MAAO,qBAvE5BC,aA4FRC,sBAAWC,YAbF,SAAAnD,GACpB,MAAO,CACHoD,eAAgBpD,EAAM+B,IAAIqB,iBAIP,SAAAC,GACvB,MAAO,CACHC,YAAa,SAAC7C,GAAD,OAAS4C,EAASE,IAAqB9C,KACpDS,cAAe,SAACa,EAAK5B,EAAIK,GAAV,OAAoB6C,EAASE,KAAwBxB,EAAK5B,EAAIK,OAI3D2C,CAA6CpD","file":"static/js/7.82709612.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport './VideoRec.css';\r\nimport { socket, webCameraApi } from '../../../../../../shared/utility';\r\nimport * as actions from '../../../../../../store/actions/index';\r\nimport Loader from '../../../../../../components/UI/Loader/Loader';\r\nimport Backdrop from '../../../../../../components/UI/Backdrop/Backdrop';\r\nimport Modal from '../../../../../../components/UI/Modal/Modal';\r\n\r\nlet videoRef = React.createRef(null);\r\nclass VideoCam extends Component {\r\n    state = {\r\n        start: false,\r\n        mediaRecorder: null,\r\n        id: this.props.match.params.id,\r\n        categ: this.props.match.params.categ,\r\n        err: null\r\n    };\r\n\r\n    componentDidMount() {\r\n        webCameraApi(socket, this.state.mediaRecorder, this.state.start, {video: true, audio: true}, \r\n            'video/mp4', 'mp4','media', 'pvtMediaRecChat').then(media => {\r\n        videoRef.current.srcObject = media.stream\r\n        this.setState({mediaRecorder: media.mediaRecorder, start: true})\r\n        }).catch(err => {\r\n            this.setState({start: false, err})\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.state.mediaRecorder) {\r\n            this.state.mediaRecorder.stream.getTracks().forEach( track => \r\n                track.stop())\r\n        }\r\n    }\r\n\r\n    stopRecHandler = () => {\r\n        webCameraApi(socket, this.state.mediaRecorder, this.state.start, {video: true, audio: true}, \r\n            'video/mp4', 'mp4','media', 'pvtMediaRecChat').then(media => {\r\n            this.setState({mediaRecorder: null, start: false})\r\n            this.props.onUploadMedia(media, this.state.id, this.state.categ)\r\n            this.props.history.goBack();\r\n        }).catch(err => {\r\n            this.setState({start: false})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let cnt = <Loader \r\n        bg/>\r\n        let err = null;\r\n    \r\n        if (this.state.start) {\r\n            cnt = null\r\n        }\r\n\r\n        if (this.state.err) {\r\n            err = (\r\n                <Backdrop \r\n                    component={ Modal }\r\n                    close={this.closeModelBackdropHandler}\r\n                    err={  this.state.err }\r\n                    media />\r\n            )\r\n        }\r\n\r\n        return(\r\n        <div className=\"site-main__chat--vidcam\">\r\n            { err }\r\n            <div className=\"site-main__chat--vidcam__wrapper\">\r\n                {cnt }\r\n                <video \r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    className=\"site-main__chat--vidcam__video--wrapper\">\r\n                    <p>our browser doesn't support embedded videos</p>\r\n                </video>\r\n                <button \r\n                    onClick={this.stopRecHandler}\r\n                    className=\"site-main__chat--vidcam__control\"\r\n                    disabled={!this.state.start}>\r\n                    <FontAwesomeIcon icon={['fas', 'video']} />\r\n                </button>\r\n            </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        vidRecBackdrop: state.cnt.vidRecBackdrop\r\n    };\r\n }\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onTypingErr: (err) => dispatch(actions.fetchCntFail(err)),\r\n        onUploadMedia: (cnt, id, categ) => dispatch(actions.uploadMediaInit(cnt, id, categ))\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(VideoCam)); "],"sourceRoot":""}