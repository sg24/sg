{"version":3,"sources":["containers/SiteMain/MainContent/Form/AddImage/MediaItem/MediaItem.js","containers/SiteMain/MainContent/Form/AddImage/AddImage.js"],"names":["cropper","React","createRef","mediaItem","state","url","cropHandler","image","current","getCroppedCanvas","imageSmoothingQuality","toDataURL","file","dataURLtoBlob","window","URL","createObjectURL","setState","props","onImageCapture","imageUrl","imageCapture","id","uuid","preview","this","src","alt","className","ref","guides","cropBoxResizable","minCropBoxHeight","minCropBoxWidth","dragMode","ready","setCropBoxData","width","height","crop","Component","connect","dispatch","actions","videoRef","AddImage","inputValue","media","removeMediaItemIndex","snapshotErr","mediaUrl","length","err","startCapture","start","linkVerifyHandler","event","target","value","onCheckLink","srcObject","getVideoTracks","forEach","track","stop","addMediaHandler","linkValid","onResetLink","openCameraHandler","navigator","mediaDevices","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","call","Error","these","video","then","stream","catch","captureImageHandler","getImageURL","imageData","imageFile","selectMediaHandler","stopPropagation","preventDefault","files","handleFiles","dragEnterMediaHandler","dragOverMediaHandler","dropMediaHandler","dataTransfer","removeMediaItemEnableHandler","index","removeMediaItemDisableHandler","removeMediaItemHandler","updatedMedia","filter","link","onRemoveMedia","updateObject","type","startsWith","submitMediaHandler","onSubmitMedia","closeMediaBoxHandler","onhideMediaBox","mediaPreview","mediaAddedViewer","streamVideoCLass","captureBtn","message","MediaItem","push","onClick","icon","name","placeholder","onChange","spellCheck","pattern","disabled","onDragEnter","onDragOver","onDrop","accept","autoPlay","join","form","linValid","imageLink"],"mappings":"6QASMA,EAAUC,IAAMC,UAAU,MAC1BC,E,2MACFC,MAAO,CACHC,IAAK,M,EAGTC,YAAc,WACV,IAAIC,EAAQP,EAAQQ,QAAQR,QAAQS,iBAAiB,CAAEC,sBAAuB,SAASC,YACnFC,EAAOC,YAAcN,GACrBF,EAAMS,OAAOC,IAAIC,gBAAgBJ,GACrC,EAAKK,SAAS,CAACZ,QACf,EAAKa,MAAMC,eAAe,CAACC,SAAU,EAAKF,MAAMb,IAAKgB,aAAcT,EAAMU,GAAIC,S,wEAI/E,IAAIC,EAAU,KAOhB,OANMC,KAAKrB,MAAMC,MACbmB,EACI,yBAAKE,IAAKD,KAAKrB,MAAMC,IAAKsB,IAAI,GAAGC,UAAU,iEAK/C,yBAAKA,UAAU,4CACX,yBAAKA,UAAU,qDACbJ,EACF,kBAAC,IAAD,CACIK,IAAK7B,EACL0B,IAAKD,KAAKP,MAAMb,IAChBuB,UAAU,yDACVE,QAAQ,EACRC,kBAAkB,EAClBC,iBAAkB,IAClBC,gBAAiB,IACjBC,SAAS,OACTC,MAAO,WACHnC,EAAQQ,QAAQR,QAAQoC,eAAe,CAACC,MAAO,IAAKC,OAAQ,OAEhEC,KAAMd,KAAKnB,oB,GArCHkC,aAmDTC,cAAQ,MANI,SAAAC,GACvB,MAAO,CACHvB,eAAgB,SAACE,GAAD,OAAkBqB,EAASC,IAAmBtB,QAIvDoB,CAAkCtC,GCnD3CyC,EAAW3C,IAAMC,UAAU,MAE3B2C,E,2MACFzC,MAAQ,CACJ0C,WAAY,GACZC,MAAO,KACPC,qBAAsB,KACtBC,YAAa,KACbC,SAAU,EAAKhC,MAAM6B,OAAS,EAAK7B,MAAM6B,MAAMxC,OAAS,EAAKW,MAAM6B,MAAMxC,MAAM4C,OAAS,EAAI,EAAKjC,MAAM6B,MAAMxC,MAAM,GAAGa,SAAW,KACjIgC,IAAK,KACLC,cAAc,EACdC,OAAO,G,EAGXC,kBAAoB,SAACC,GACjB,IAAIV,EAAcU,EAAMC,OAAOC,MAC/B,EAAKzC,SAAS,CAAC6B,aAAYG,YAAa,OACxC,EAAK/B,MAAMyC,YAAYb,GAEnB,EAAK1C,MAAMiD,eACXT,EAASpC,QAAQoD,UAAUC,iBAAiBC,SAAQ,SAASC,GACzDA,EAAMC,UAEZ,EAAK/C,SAAS,CAACoC,cAAc,M,EAInCY,gBAAkB,WACV,EAAK/C,MAAMgD,WAAa,EAAKhD,MAAMgD,UAAUnB,QAC7C,EAAK9B,SAAS,CACV8B,MAAO,CAACnC,KAAM,EAAKM,MAAMgD,UAAUnB,MAAMnC,KAAMP,IAAK,EAAKa,MAAMgD,UAAUnB,MAAM1C,IAAKiB,GAAIC,OAAUuB,WAAY,KAClH,EAAK5B,MAAMiD,gB,EAInBC,kBAAoB,WACV,iBAAkBC,YACpBA,UAAUC,aAAe,IAGvB,iBAAkBD,UAAUC,eAC9BD,UAAUC,aAAaC,aAAe,SAASC,GAC/C,IAAID,EAAeF,UAAUI,oBAAsBJ,UAAUK,gBAE7D,OAAKH,EAIE,IAAII,SAAQ,SAASC,EAASC,GACjCN,EAAaO,KAAKT,UAAWG,EAAaI,EAASC,MAJ5CF,QAAQE,OAAO,IAAIE,MAAM,uCAQxC,IAAIC,EAAK,eACTX,UAAUC,aAAaC,aAAa,CAACU,OAAO,IACvCC,MAAK,SAASC,GACXvC,EAASpC,QAAQoD,UAAWuB,EAC5BH,EAAM/D,SAAS,CAACoC,cAAc,EAAMH,SAAU,UAEjDkC,OAAM,SAAShC,GACZ4B,EAAM/D,SAAS,CAACmC,MAAKC,cAAc,Q,EAI/CgC,oBAAsB,WAClBC,YAAY1C,EAASpC,SAAS0E,MAAK,SAAAK,GAC/B3C,EAASpC,QAAQoD,UAAUC,iBAAiBC,SAAQ,SAASC,GACvDA,EAAMC,UAEZ,IAAIwB,EAAY3E,YAAc0E,GAC1BlF,EAAMS,OAAOC,IAAIC,gBAAgBwE,GACrC,EAAKvE,SAAS,CAACiC,SAAU7C,EAAKgD,cAAc,OAC7C+B,OAAM,SAAAhC,GACL,EAAKnC,SAAS,CAACmC,Y,EAIvBqC,mBAAqB,SAACjC,GAIlB,GAHA,EAAKvC,SAAS,CAACgC,YAAa,OAC5BO,EAAMkC,kBACNlC,EAAMmC,iBACFnC,EAAMC,OAAOmC,MAAO,CACpB,IAAMA,EAAQpC,EAAMC,OAAOmC,MAC3B,EAAKC,YAAYD,K,EAIzBE,sBAAwB,SAACtC,GACrBA,EAAMkC,kBACNlC,EAAMmC,kB,EAGVI,qBAAuB,SAACvC,GACpBA,EAAMkC,kBACNlC,EAAMmC,kB,EAGVK,iBAAmB,SAACxC,GAGhB,GAFAA,EAAMkC,kBACNlC,EAAMmC,iBACFnC,EAAMyC,aAAc,CACpB,IACML,EADKpC,EAAMyC,aACAL,MACjB,EAAKC,YAAYD,K,EAIzBM,6BAA+B,SAACC,GAC5B,EAAKlF,SAAS,CAAC+B,qBAAsBmD,K,EAGzCC,8BAAgC,WAC5B,EAAKnF,SAAS,CAAC+B,qBAAsB,Q,EAGzCqD,uBAAyB,SAAC/E,GACtB,IACIgF,EADK,YAAO,EAAKlG,MAAM2C,OACFwD,QAAO,SAAAC,GAAI,OAAKA,EAAKlF,KAAOA,KACrD,EAAKL,SAAS,CAAC8B,MAAQuD,IACnB,EAAKpF,MAAM6B,MAAMxC,OAAS,EAAKW,MAAM6B,MAAMxC,MAAM4C,OAAS,GAC1D,EAAKjC,MAAMuF,cAAcC,YAAa,EAAKxF,MAAM6B,MAAO,CAACxC,MAAO+F,M,EAIxET,YAAc,SAACD,GACN,EAAKxF,MAAMiD,eACZT,EAASpC,QAAQoD,UAAUC,iBAAiBC,SAAQ,SAASC,GACzDA,EAAMC,UAEZ,EAAK/C,SAAS,CAACoC,cAAc,KAE/B,IAAMzC,EAAOgF,EAAM,GACnB,GAAGhF,EAAK+F,KAAKC,WAAW,UAAW,CAC/B,IAAIvG,EAAMS,OAAOC,IAAIC,gBAAgBJ,GACrC,EAAKK,SAAS,CAACiC,SAAU7C,M,EAIhCwG,mBAAqB,WAClB,IAAI9D,EAAK,eAAO,EAAK7B,MAAM6B,OAC3B,EAAK7B,MAAM4F,cAAcJ,YAAa3D,EAAO,CAACxC,MAAO,CAAC,eAAI,EAAKW,MAAMG,kBACjEuB,EAASpC,SAAWoC,EAASpC,QAAQoD,WACrChB,EAASpC,QAAQoD,UAAUC,iBAAiBC,SAAQ,SAASC,GACzDA,EAAMC,W,EAKlB+C,qBAAuB,WACnB,EAAK7F,MAAM8F,iBACPpE,EAASpC,SAAWoC,EAASpC,QAAQoD,WACrChB,EAASpC,QAAQoD,UAAUC,iBAAiBC,SAAQ,SAASC,GACzDA,EAAMC,W,wEAOd,IAAIiD,EAAe,KACfC,EAAmB,KACnBC,EAAmB,CAAC,4DACpBC,EAAa,KA4BjB,OA1BI3F,KAAKP,MAAMgD,WAAazC,KAAKrB,MAAMgD,OACnC6D,EAAexF,KAAKP,MAAMgD,WAAazC,KAAKP,MAAMgD,UAAUd,IAC5D,yBAAKxB,UAAU,mBAAoBH,KAAKP,MAAMgD,UAAUd,IAAIiE,SAC5D5F,KAAKrB,MAAMgD,IAAM,yBAAKxB,UAAU,mBAAoBH,KAAKrB,MAAMgD,IAAIiE,SAAkB,MAErF5F,KAAKrB,MAAM8C,WACXgE,EACI,yBAAKtF,UAAU,qCACX,kBAAC0F,EAAD,CACGjH,IAAKoB,KAAKrB,MAAM8C,cAK1BzB,KAAKrB,MAAMgD,KAAO3B,KAAKrB,MAAMiD,eAC9B8D,EAAiBI,KAAK,kEACtBH,EACI,yBAAKxF,UAAU,2CACf,4BACI+E,KAAK,SACL/E,UAAU,uBACV4F,QAAS/F,KAAK4D,qBAHlB,aASJ,yBAAKzD,UAAU,mBACX,wBAAIA,UAAU,0BACV,kBAAC,IAAD,CACI6F,KAAM,CAAC,MAAO,UACd7F,UAAU,sCAHlB,aAMA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,mBACX,2BAAOA,UAAU,0BAAjB,cACA,yBAAKA,UAAU,wBACX,2BACI+E,KAAK,MACLe,KAAK,GACL9F,UAAU,8DACV+F,YAAY,aACZC,SAAUnG,KAAK8B,kBACfG,MAAOjC,KAAKrB,MAAM0C,WAClB+E,YAAY,EACZC,QAAQ,eACR,4BACInB,KAAK,SACLa,QAAS/F,KAAKwC,gBACd8D,UAAUtG,KAAKP,MAAMgD,WAAyC,OAA7BzC,KAAKP,MAAMgD,UAAUd,IACtDxB,UAAU,6BACV,kBAAC,IAAD,CACA6F,KAAM,CAAC,MAAO,aAI9B,yBAAK7F,UAAU,8BACTqF,GAEN,yBAAKrF,UAAU,6BAAf,MAGA,yBACIA,UAAU,+BACV4F,QAAS/F,KAAK2C,mBACd,kBAAC,IAAD,CACIqD,KAAM,CAAC,MAAO,UACd7F,UAAU,uCALlB,iBAQA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,6BACf,6CACI,2BACI+E,KAAK,OACLe,KAAK,GACL9F,UAAU,mCACVgG,SAAUnG,KAAKgE,mBACfuC,YAAavG,KAAKqE,sBAClBmC,WAAYxG,KAAKsE,qBACjBmC,OAAQzG,KAAKuE,iBACbmC,OAAO,eAIvB,2BACItG,IAAKe,EACLwF,UAAQ,EACRxG,UAAWuF,EAAiBkB,KAAK,MACjC,2EAEFjB,EACA3F,KAAKrB,MAAM6C,YACT,yBAAKrB,UAAU,mBAAf,oDAAoFH,KAAKrB,MAAM6C,aAAsB,KACvHiE,GAEN,yBAAKtF,UAAU,2CACX,4BACI+E,KAAK,SACL/E,UAAU,yBACV4F,QAAS/F,KAAKsF,sBAHlB,QAIA,4BACIJ,KAAK,SACL/E,UAAU,uBACV4F,QAAS/F,KAAKoF,mBACdkB,UAAWtG,KAAKP,MAAMG,cAJ1B,a,GAzQGmB,aAsSRC,uBAlBS,SAAArC,GACpB,MAAO,CACH8D,UAAW9D,EAAMkI,KAAKC,SACtBxF,MAAO3C,EAAMkI,KAAKvF,MAClB1B,aAAcjB,EAAMkI,KAAKjH,iBAIN,SAAAqB,GACvB,MAAO,CACHiB,YAAa,SAAC6E,GAAD,OAAe9F,EAASC,IAAsB6F,EAAW,WACtErE,YAAa,kBAAMzB,EAASC,QAC5B8D,cAAe,SAAC1D,GAAD,OAAWL,EAASC,IAAoBI,KACvD+D,cAAe,SAAC/D,GAAD,OAAWL,EAASC,KAAoBI,KACvDiE,eAAgB,kBAAMtE,EAASC,WAIxBF,CAA6CI","file":"static/js/4.adc5bd51.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport { connect } from 'react-redux';\r\nimport 'cropperjs/dist/cropper.css';\r\nimport uuid from 'uuid';\r\n\r\nimport { dataURLtoBlob, updateObject } from '../../../../../../shared/utility';\r\nimport * as actions from '../../../../../../store/actions/index';\r\n\r\nconst cropper = React.createRef(null);\r\nclass mediaItem extends Component {\r\n    state= {\r\n        url: null\r\n    };\r\n\r\n    cropHandler = () => {\r\n        let image = cropper.current.cropper.getCroppedCanvas({ imageSmoothingQuality: 'high'}).toDataURL()\r\n        let file = dataURLtoBlob(image);\r\n        let url = window.URL.createObjectURL(file);\r\n        this.setState({url});\r\n        this.props.onImageCapture({imageUrl: this.props.url, imageCapture: file, id: uuid()})\r\n    }\r\n    \r\n  render() {\r\n      let preview = null\r\n      if (this.state.url) {\r\n        preview = (\r\n            <img src={this.state.url} alt=\"\" className=\"reuse-form__itm--det__view-select--media__wrapper--preview \"/>\r\n        )\r\n      }\r\n\r\n    return (\r\n        <div className=\"reuse-form__itm--det__view-select--media\">\r\n            <div className=\"reuse-form__itm--det__view-select--media__wrapper\">\r\n            { preview }\r\n            <Cropper\r\n                ref={cropper}\r\n                src={this.props.url}\r\n                className=\"reuse-form__itm--det__view-select--media__wrapper--cnt\"\r\n                guides={false}\r\n                cropBoxResizable={false}\r\n                minCropBoxHeight={100}\r\n                minCropBoxWidth={100}\r\n                dragMode=\"none\"\r\n                ready={() => {\r\n                    cropper.current.cropper.setCropBoxData({width: 100, height: 100});\r\n                }}\r\n                crop={this.cropHandler} />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onImageCapture: (imageCapture) => dispatch(actions.groupImage(imageCapture))\r\n    };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(mediaItem);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport uuid from 'uuid';\r\n\r\nimport MediaItem from './MediaItem/MediaItem';\r\nimport * as actions from '../../../../../store/actions/index';\r\nimport { updateObject } from '../../../../../shared/utility';\r\nimport { getImageURL, dataURLtoBlob } from '../../../../../shared/utility';\r\n\r\nconst videoRef = React.createRef(null);\r\n\r\nclass AddImage extends Component {\r\n    state = {\r\n        inputValue: '',\r\n        media: null,\r\n        removeMediaItemIndex: null,\r\n        snapshotErr: null,\r\n        mediaUrl: this.props.media && this.props.media.image && this.props.media.image.length > 0 ? this.props.media.image[0].imageUrl : null,\r\n        err: null,\r\n        startCapture: false,\r\n        start: false\r\n    };\r\n\r\n    linkVerifyHandler = (event) => {\r\n        let inputValue =  event.target.value;\r\n        this.setState({inputValue, snapshotErr: null});\r\n        this.props.onCheckLink(inputValue);\r\n\r\n        if (this.state.startCapture) {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n          this.setState({startCapture: false});\r\n        }\r\n    }\r\n\r\n    addMediaHandler = () => {\r\n        if (this.props.linkValid && this.props.linkValid.media) {\r\n            this.setState({\r\n                media: {file: this.props.linkValid.media.file, url: this.props.linkValid.media.url, id: uuid()},  inputValue: ''});\r\n            this.props.onResetLink();\r\n        }\r\n    }\r\n\r\n    openCameraHandler = () => {\r\n        if (!('mediaDevices' in navigator)) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        \r\n        if (!('getUserMedia' in navigator.mediaDevices)) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n            var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n        \r\n            if (!getUserMedia) {\r\n                return Promise.reject(new Error('getUserMedia is not implemented!'));\r\n            }\r\n        \r\n            return new Promise(function(resolve, reject) {\r\n                getUserMedia.call(navigator, constraints, resolve, reject);\r\n            });\r\n            }\r\n        }\r\n        let these = this;\r\n        navigator.mediaDevices.getUserMedia({video: true})\r\n            .then(function(stream) {\r\n                videoRef.current.srcObject= stream;\r\n                these.setState({startCapture: true, mediaUrl: null})\r\n            })\r\n            .catch(function(err) {\r\n                these.setState({err, startCapture: false})\r\n            });\r\n    }\r\n\r\n    captureImageHandler = () => {\r\n        getImageURL(videoRef.current).then(imageData => {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                  track.stop();\r\n            });\r\n            let imageFile = dataURLtoBlob(imageData);\r\n            let url = window.URL.createObjectURL(imageFile)\r\n            this.setState({mediaUrl: url, startCapture: false})\r\n        }).catch(err => {\r\n            this.setState({err})\r\n        })\r\n    }\r\n\r\n    selectMediaHandler = (event) => {\r\n        this.setState({snapshotErr: null});\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (event.target.files) {\r\n            const files = event.target.files;\r\n            this.handleFiles(files)\r\n        }\r\n    }\r\n\r\n    dragEnterMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    dragOverMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    }\r\n\r\n    dropMediaHandler = (event) => {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        if (event.dataTransfer) {\r\n            const dt = event.dataTransfer;\r\n            const files = dt.files;\r\n            this.handleFiles(files)\r\n        }\r\n    }\r\n\r\n    removeMediaItemEnableHandler = (index) => {\r\n        this.setState({removeMediaItemIndex: index})\r\n    }\r\n\r\n    removeMediaItemDisableHandler = () => {\r\n        this.setState({removeMediaItemIndex: null})\r\n    }\r\n    \r\n    removeMediaItemHandler = (id) => {\r\n        let media = [...this.state.media];\r\n        let updatedMedia = media.filter(link =>  link.id !== id);\r\n        this.setState({media:  updatedMedia});\r\n        if (this.props.media.image && this.props.media.image.length > 0) {\r\n            this.props.onRemoveMedia(updateObject(this.props.media, {image: updatedMedia}))\r\n        }\r\n    }\r\n\r\n    handleFiles = (files) => {\r\n         if (this.state.startCapture) {\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n          this.setState({startCapture: false});\r\n        }\r\n        const file = files[0];\r\n        if(file.type.startsWith('image/')) {\r\n            let url = window.URL.createObjectURL(file)\r\n            this.setState({mediaUrl: url})\r\n        }\r\n    }\r\n\r\n     submitMediaHandler = () => {\r\n        let media = {...this.props.media};\r\n        this.props.onSubmitMedia(updateObject(media, {image: [{...this.props.imageCapture}]}));\r\n        if (videoRef.current && videoRef.current.srcObject){\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n        }\r\n    }\r\n\r\n    closeMediaBoxHandler = () => {\r\n        this.props.onhideMediaBox();\r\n        if (videoRef.current && videoRef.current.srcObject){\r\n            videoRef.current.srcObject.getVideoTracks().forEach(function(track) {\r\n                track.stop();\r\n          });\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let mediaPreview = null;\r\n        let mediaAddedViewer = null;\r\n        let streamVideoCLass = [\"reuse-form__itm--det__view-select--media__wrapper--video\"];\r\n        let captureBtn = null;\r\n\r\n        if (this.props.linkValid || this.state.err) {\r\n            mediaPreview = this.props.linkValid && this.props.linkValid.err ?\r\n            <div className=\"reuse-form__err\">{ this.props.linkValid.err.message}</div> : \r\n            this.state.err ? <div className=\"reuse-form__err\">{ this.state.err.message }</div> : null\r\n        }\r\n        if (this.state.mediaUrl) {\r\n            mediaAddedViewer = (\r\n                <div className=\"reuse-form__itm--det__view-select\">\r\n                    <MediaItem\r\n                       url={this.state.mediaUrl}/>\r\n                </div>\r\n            ); \r\n        }\r\n\r\n        if (!this.state.err && this.state.startCapture) {\r\n            streamVideoCLass.push('reuse-form__itm--det__view-select--media__wrapper--video__show');\r\n            captureBtn = (\r\n                <div className=\"reuse-form__itm--footer reuse-form__btn\">\r\n                <button \r\n                    type=\"button\" \r\n                    className=\"reuse-form__btn--add\"\r\n                    onClick={this.captureImageHandler}>Capture</button>\r\n            </div>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"reuse-form__itm\">\r\n                <h4 className=\"reuse-form__itm--title\">\r\n                    <FontAwesomeIcon \r\n                        icon={['fas', 'images']}\r\n                        className=\"icon icon__reuse-form--itm--title\" />\r\n                  Add Image\r\n                </h4>\r\n                <div className=\"reuse-form__itm--det\">\r\n                    <div className=\"reuse-form__cnt\">\r\n                        <label className=\"reuse-form__cnt--title\">Image Link</label>\r\n                        <div className=\"reuse-form__cnt--det\">\r\n                            <input \r\n                                type=\"url\" \r\n                                name=\"\" \r\n                                className=\"reuse-form__cnt--det__input reuse-form__cnt--det__input--lg\" \r\n                                placeholder=\"paste link\"\r\n                                onChange={this.linkVerifyHandler}\r\n                                value={this.state.inputValue}\r\n                                spellCheck={false}\r\n                                pattern=\"https://.*\"/>\r\n                                <button\r\n                                    type=\"button\"\r\n                                    onClick={this.addMediaHandler}\r\n                                    disabled={this.props.linkValid ? this.props.linkValid.err !== null : true}\r\n                                    className=\"reuse-form__cnt--det__btn\">\r\n                                    <FontAwesomeIcon \r\n                                    icon={['fas', 'plus']} />\r\n                                </button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"reuse-form__itm--det__view\">\r\n                        { mediaPreview }\r\n                    </div>\r\n                    <div className=\"reuse-form__itm--det__alt\">\r\n                        OR\r\n                    </div>\r\n                    <div \r\n                        className=\"reuse-form__itm--det__camera\"\r\n                        onClick={this.openCameraHandler}>\r\n                        <FontAwesomeIcon \r\n                            icon={['fas', 'camera']}\r\n                            className=\"icon icon__reuse-form--itm--camera\" />\r\n                        Take Snapshot \r\n                    </div>\r\n                    <div className=\"reuse-form__cnt\">\r\n                        <div className=\"reuse-form__cnt--det\">\r\n                            <div className=\"reuse-form__cnt--det__fil\">\r\n                            <div>Upload Image</div>\r\n                                <input \r\n                                    type=\"file\" \r\n                                    name=\"\"\r\n                                    className=\"reuse-form__cnt--det__fil--input\"\r\n                                    onChange={this.selectMediaHandler}\r\n                                    onDragEnter={this.dragEnterMediaHandler}\r\n                                    onDragOver={this.dragOverMediaHandler}\r\n                                    onDrop={this.dropMediaHandler}\r\n                                    accept=\"image/*\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <video \r\n                        ref={videoRef}\r\n                        autoPlay\r\n                        className={streamVideoCLass.join(' ')}>\r\n                        <p>our browser doesn't support embedded videos</p>\r\n                    </video>\r\n                    { captureBtn }\r\n                    { this.state.snapshotErr ? \r\n                        <div className=\"reuse-form__err\">Some features are not available in your browser, { this.state.snapshotErr }</div> : null}\r\n                    { mediaAddedViewer }\r\n                </div>\r\n                <div className=\"reuse-form__itm--footer reuse-form__btn\">\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"reuse-form__btn--close\"\r\n                        onClick={this.closeMediaBoxHandler}>Exit</button>\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"reuse-form__btn--add\"\r\n                        onClick={this.submitMediaHandler}\r\n                        disabled={!this.props.imageCapture}>Add</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        linkValid: state.form.linValid,\r\n        media: state.form.media,\r\n        imageCapture: state.form.imageCapture\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onCheckLink: (imageLink) => dispatch(actions.checkLinkInit(imageLink, 'image')),\r\n        onResetLink: () => dispatch(actions.resetLink()),\r\n        onRemoveMedia: (media) => dispatch(actions.removeMedia(media)),\r\n        onSubmitMedia: (media) => dispatch(actions.submitMedia(media)),\r\n        onhideMediaBox: () => dispatch(actions.hideMediaBox()),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddImage)"],"sourceRoot":""}