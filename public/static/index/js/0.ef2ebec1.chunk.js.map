{"version":3,"sources":["../../../node_modules/pepjs/dist/pep.js"],"names":["module","exports","MOUSE_PROPS","MOUSE_DEFAULTS","PointerEvent","inType","inDict","Object","create","e","document","createEvent","initEvent","bubbles","cancelable","p","i","length","buttons","pressure","undefined","x","clientX","y","clientY","pointerId","width","height","tiltX","tiltY","twist","tangentialPressure","pointerType","hwTimestamp","isPrimary","detail","PointerMap","window","Map","prototype","forEach","SparseArrayMap","this","array","size","set","k","v","delete","has","get","clear","callback","thisArg","call","CLONE_PROPS","CLONE_DEFAULTS","BOUNDARY_EVENTS","pointerover","pointerout","pointerenter","pointerleave","HAS_SVG_INSTANCE","SVGElementInstance","dispatcher","pointermap","eventMap","captureInfo","eventSources","eventSourceList","registerSource","name","source","s","newEvents","events","bind","push","register","element","es","l","unregister","contains","container","contained","ex","down","inEvent","fireEvent","move","up","enter","leave","over","out","cancel","leaveOut","event","propagate","enterOver","eventHandler","_handledByPE","type","fn","listen","target","addEvent","unlisten","removeEvent","eventName","addEventListener","boundHandler","removeEventListener","makeEvent","relatedTarget","preventDefault","_target","dispatchEvent","cloneEvent","eventCopy","correspondingUseElement","getTarget","capture","propagateDown","targets","parentNode","reverse","setCapture","inPointerId","inTarget","skipDispatch","releaseCapture","implicitRelease","asyncDispatchEvent","t","requestAnimationFrame","targeting","shadow","inEl","shadowRoot","webkitShadowRoot","canTarget","Boolean","elementFromPoint","targetingShadow","olderShadow","os","olderShadowRoot","se","querySelector","allShadows","shadows","searchRoot","inRoot","st","sr","ssr","owner","nodeType","Node","DOCUMENT_NODE","DOCUMENT_FRAGMENT_NODE","findTarget","Array","map","toArray","slice","filter","MO","MutationObserver","WebKitMutationObserver","OBSERVER_INIT","subtree","childList","attributes","attributeOldValue","attributeFilter","Installer","add","remove","changed","binder","addCallback","removeCallback","changedCallback","observer","mutationWatcher","rule","watchSubtree","observe","enableOnSubtree","readyState","installOnLoad","installNewSubtree","findElements","addElement","querySelectorAll","removeElement","el","elementChanged","oldValue","concatLists","accum","list","concat","isElement","n","ELEMENT_NODE","flattenMutationTree","inNodes","tree","reduce","mutations","mutationHandler","m","added","addedNodes","removed","removedNodes","attrib2css","selector","value","styles","hasNativePE","MSPointerEvent","hasShadowRoot","ShadowDOMPolyfill","head","createShadowRoot","BUTTON_TO_BUTTONS","HAS_BUTTONS","MouseEvent","INSTALLER","mouseEvents","POINTER_ID","POINTER_TYPE","lastTouches","isEventSimulatedFromTouch","lts","dx","Math","abs","dy","prepareEvent","pd","webkitForce","WEBKIT_FORCE_AT_MOUSE_DOWN","prepareButtonsForMove","which","mousedown","button","webkitmouseforcechanged","mousemove","mouseup","mouseover","mouseout","deactivateMouse","pointermap$1","touchEvents","elementAdded","a","getAttribute","touchActionToScrollType","_scrollType","elementRemoved","evts","oldSt","scrollTypes","UP","includes","DOWN","LEFT","RIGHT","touchAction","_UP","split","firstTouch","isPrimaryTouch","inTouch","identifier","setPrimaryTouch","firstXY","X","Y","scrolling","removePrimaryPointer","inPointer","typeToButtons","ret","touchToPointer","cte","currentTouchEvent","id","radiusX","webkitRadiusX","radiusY","webkitRadiusY","force","altitudeAngle","tan","radToDeg","PI","atan","cos","azimuthAngle","sin","touchType","altKey","ctrlKey","metaKey","shiftKey","self","processTouches","inFunction","tl","changedTouches","shouldScroll","currentTarget","dya","dxa","left","right","findTouch","inTL","inId","vacuumTouches","touches","d","key","cancelOut","touchstart","dedupSynthMouse","overDown","outTarget","touchforcechange","touchmove","touchcancel","moveOverOut","pointer","outEvent","touchend","upOut","cleanUpPointer","lt","indexOf","splice","setTimeout","r","h","pointermap$2","HAS_BITMAP_TYPE","MSPOINTER_TYPE_MOUSE","msEvents","POINTER_TYPES","cleanup","MSPointerDown","MSPointerMove","MSPointerUp","MSPointerOut","MSPointerOver","MSPointerCancel","MSLostPointerCapture","MSGotPointerCapture","assertActive","error","Error","assertConnected","elem","parent","ownerDocument","inActiveButtonState","navigator","msPointerEnabled","msSetPointerCapture","msReleasePointerCapture","createElement","textContent","appendChild","applyAttributeStyles","tp","msMaxTouchPoints","defineProperty","enumerable","ontouchstart","applyPolyfill","Element","setPointerCapture","defineProperties","releasePointerCapture","hasPointerCapture","targetFinding","factory"],"mappings":"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","file":"static/js/0.ef2ebec1.chunk.js","sourcesContent":["/*!\n * PEP v0.5.1 | https://github.com/jquery/PEP\n * Copyright jQuery Foundation and other contributors | http://jquery.org/license\n */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.PointerEventsPolyfill = factory();\n})(this, function () {\n  'use strict';\n  /**\n   * This is the constructor for new PointerEvents.\n   *\n   * New Pointer Events must be given a type, and an optional dictionary of\n   * initialization properties.\n   *\n   * Due to certain platform requirements, events returned from the constructor\n   * identify as MouseEvents.\n   *\n   * @constructor\n   * @param {String} inType The type of the event to create.\n   * @param {Object} [inDict] An optional dictionary of initial event properties.\n   * @return {Event} A new PointerEvent of type `inType`, initialized with properties from `inDict`.\n   */\n\n  var MOUSE_PROPS = ['bubbles', 'cancelable', 'view', 'screenX', 'screenY', 'clientX', 'clientY', 'ctrlKey', 'altKey', 'shiftKey', 'metaKey', 'button', 'relatedTarget', 'pageX', 'pageY'];\n  var MOUSE_DEFAULTS = [false, false, null, 0, 0, 0, 0, false, false, false, false, 0, null, 0, 0];\n\n  function PointerEvent(inType, inDict) {\n    inDict = inDict || Object.create(null);\n    var e = document.createEvent('Event');\n    e.initEvent(inType, inDict.bubbles || false, inDict.cancelable || false); // define inherited MouseEvent properties\n    // skip bubbles and cancelable since they're set above in initEvent()\n\n    for (var i = 2, p; i < MOUSE_PROPS.length; i++) {\n      p = MOUSE_PROPS[i];\n      e[p] = inDict[p] || MOUSE_DEFAULTS[i];\n    }\n\n    e.buttons = inDict.buttons || 0; // Spec requires that pointers without pressure specified use 0.5 for down\n    // state and 0 for up state.\n\n    var pressure = 0;\n\n    if (inDict.pressure !== undefined && e.buttons) {\n      pressure = inDict.pressure;\n    } else {\n      pressure = e.buttons ? 0.5 : 0;\n    } // add x/y properties aliased to clientX/Y\n\n\n    e.x = e.clientX;\n    e.y = e.clientY; // define the properties of the PointerEvent interface\n\n    e.pointerId = inDict.pointerId || 0;\n    e.width = inDict.width || 1;\n    e.height = inDict.height || 1;\n    e.pressure = pressure;\n    e.tiltX = inDict.tiltX || 0;\n    e.tiltY = inDict.tiltY || 0;\n    e.twist = inDict.twist || 0;\n    e.tangentialPressure = inDict.tangentialPressure || 0;\n    e.pointerType = inDict.pointerType || '';\n    e.hwTimestamp = inDict.hwTimestamp || 0;\n    e.isPrimary = inDict.isPrimary || false;\n    e.detail = 0;\n    return e;\n  }\n  /**\n   * This module implements a map of pointer states\n   */\n\n\n  var USE_MAP = window.Map && window.Map.prototype.forEach;\n  var PointerMap = USE_MAP ? Map : SparseArrayMap;\n\n  function SparseArrayMap() {\n    this.array = [];\n    this.size = 0;\n  }\n\n  SparseArrayMap.prototype = {\n    set: function set(k, v) {\n      if (v === undefined) {\n        return this.delete(k);\n      }\n\n      if (!this.has(k)) {\n        this.size++;\n      }\n\n      this.array[k] = v;\n    },\n    has: function has(k) {\n      return this.array[k] !== undefined;\n    },\n    delete: function _delete(k) {\n      if (this.has(k)) {\n        delete this.array[k];\n        this.size--;\n      }\n    },\n    get: function get(k) {\n      return this.array[k];\n    },\n    clear: function clear() {\n      this.array.length = 0;\n      this.size = 0;\n    },\n    // return value, key, map\n    forEach: function forEach(callback, thisArg) {\n      return this.array.forEach(function (v, k) {\n        callback.call(thisArg, v, k, this);\n      }, this);\n    }\n  };\n  var CLONE_PROPS = [// MouseEvent\n  'bubbles', 'cancelable', 'view', 'detail', 'screenX', 'screenY', 'clientX', 'clientY', 'ctrlKey', 'altKey', 'shiftKey', 'metaKey', 'button', 'relatedTarget', // DOM Level 3\n  'buttons', // PointerEvent\n  'pointerId', 'width', 'height', 'pressure', 'tiltX', 'tiltY', 'pointerType', 'hwTimestamp', 'isPrimary', // event instance\n  'type', 'target', 'currentTarget', 'which', 'pageX', 'pageY', 'timeStamp'];\n  var CLONE_DEFAULTS = [// MouseEvent\n  false, false, null, null, 0, 0, 0, 0, false, false, false, false, 0, null, // DOM Level 3\n  0, // PointerEvent\n  0, 0, 0, 0, 0, 0, '', 0, false, // event instance\n  '', null, null, 0, 0, 0, 0];\n  var BOUNDARY_EVENTS = {\n    'pointerover': 1,\n    'pointerout': 1,\n    'pointerenter': 1,\n    'pointerleave': 1\n  };\n  var HAS_SVG_INSTANCE = typeof SVGElementInstance !== 'undefined';\n  /**\n   * This module is for normalizing events. Mouse and Touch events will be\n   * collected here, and fire PointerEvents that have the same semantics, no\n   * matter the source.\n   * Events fired:\n   *   - pointerdown: a pointing is added\n   *   - pointerup: a pointer is removed\n   *   - pointermove: a pointer is moved\n   *   - pointerover: a pointer crosses into an element\n   *   - pointerout: a pointer leaves an element\n   *   - pointercancel: a pointer will no longer generate events\n   */\n\n  var dispatcher = {\n    pointermap: new PointerMap(),\n    eventMap: Object.create(null),\n    captureInfo: Object.create(null),\n    // Scope objects for native events.\n    // This exists for ease of testing.\n    eventSources: Object.create(null),\n    eventSourceList: [],\n\n    /**\n     * Add a new event source that will generate pointer events.\n     *\n     * `inSource` must contain an array of event names named `events`, and\n     * functions with the names specified in the `events` array.\n     * @param {string} name A name for the event source\n     * @param {Object} source A new source of platform events.\n     */\n    registerSource: function registerSource(name, source) {\n      var s = source;\n      var newEvents = s.events;\n\n      if (newEvents) {\n        newEvents.forEach(function (e) {\n          if (s[e]) {\n            this.eventMap[e] = s[e].bind(s);\n          }\n        }, this);\n        this.eventSources[name] = s;\n        this.eventSourceList.push(s);\n      }\n    },\n    register: function register(element) {\n      var l = this.eventSourceList.length;\n\n      for (var i = 0, es; i < l && (es = this.eventSourceList[i]); i++) {\n        // call eventsource register\n        es.register.call(es, element);\n      }\n    },\n    unregister: function unregister(element) {\n      var l = this.eventSourceList.length;\n\n      for (var i = 0, es; i < l && (es = this.eventSourceList[i]); i++) {\n        // call eventsource register\n        es.unregister.call(es, element);\n      }\n    },\n    contains:\n    /*scope.external.contains || */\n    function contains(container, contained) {\n      try {\n        return container.contains(contained);\n      } catch (ex) {\n        // most likely: https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n        return false;\n      }\n    },\n    // EVENTS\n    down: function down(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerdown', inEvent);\n    },\n    move: function move(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointermove', inEvent);\n    },\n    up: function up(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerup', inEvent);\n    },\n    enter: function enter(inEvent) {\n      inEvent.bubbles = false;\n      this.fireEvent('pointerenter', inEvent);\n    },\n    leave: function leave(inEvent) {\n      inEvent.bubbles = false;\n      this.fireEvent('pointerleave', inEvent);\n    },\n    over: function over(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerover', inEvent);\n    },\n    out: function out(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointerout', inEvent);\n    },\n    cancel: function cancel(inEvent) {\n      inEvent.bubbles = true;\n      this.fireEvent('pointercancel', inEvent);\n    },\n    leaveOut: function leaveOut(event) {\n      this.out(event);\n      this.propagate(event, this.leave, false);\n    },\n    enterOver: function enterOver(event) {\n      this.over(event);\n      this.propagate(event, this.enter, true);\n    },\n    // LISTENER LOGIC\n    eventHandler: function eventHandler(inEvent) {\n      // This is used to prevent multiple dispatch of pointerevents from\n      // platform events. This can happen when two elements in different scopes\n      // are set up to create pointer events, which is relevant to Shadow DOM.\n      if (inEvent._handledByPE) {\n        return;\n      }\n\n      var type = inEvent.type;\n      var fn = this.eventMap && this.eventMap[type];\n\n      if (fn) {\n        fn(inEvent);\n      }\n\n      inEvent._handledByPE = true;\n    },\n    // set up event listeners\n    listen: function listen(target, events) {\n      events.forEach(function (e) {\n        this.addEvent(target, e);\n      }, this);\n    },\n    // remove event listeners\n    unlisten: function unlisten(target, events) {\n      events.forEach(function (e) {\n        this.removeEvent(target, e);\n      }, this);\n    },\n    addEvent:\n    /*scope.external.addEvent || */\n    function addEvent(target, eventName) {\n      target.addEventListener(eventName, this.boundHandler);\n    },\n    removeEvent:\n    /*scope.external.removeEvent || */\n    function removeEvent(target, eventName) {\n      target.removeEventListener(eventName, this.boundHandler);\n    },\n    // EVENT CREATION AND TRACKING\n\n    /**\n     * Creates a new Event of type `inType`, based on the information in\n     * `inEvent`.\n     *\n     * @param {string} inType A string representing the type of event to create\n     * @param {Event} inEvent A platform event with a target\n     * @return {Event} A PointerEvent of type `inType`\n     */\n    makeEvent: function makeEvent(inType, inEvent) {\n      // relatedTarget must be null if pointer is captured\n      if (this.captureInfo[inEvent.pointerId]) {\n        inEvent.relatedTarget = null;\n      }\n\n      var e = new PointerEvent(inType, inEvent);\n\n      if (inEvent.preventDefault) {\n        e.preventDefault = inEvent.preventDefault;\n      }\n\n      e._target = e._target || inEvent.target;\n      return e;\n    },\n    // make and dispatch an event in one call\n    fireEvent: function fireEvent(inType, inEvent) {\n      var e = this.makeEvent(inType, inEvent);\n      return this.dispatchEvent(e);\n    },\n\n    /**\n     * Returns a snapshot of inEvent, with writable properties.\n     *\n     * @param {Event} inEvent An event that contains properties to copy.\n     * @return {Object} An object containing shallow copies of `inEvent`'s\n     *    properties.\n     */\n    cloneEvent: function cloneEvent(inEvent) {\n      var eventCopy = Object.create(null);\n      var p;\n\n      for (var i = 0; i < CLONE_PROPS.length; i++) {\n        p = CLONE_PROPS[i];\n        eventCopy[p] = inEvent[p] || CLONE_DEFAULTS[i]; // Work around SVGInstanceElement shadow tree\n        // Return the <use> element that is represented by the instance for Safari, Chrome, IE.\n        // This is the behavior implemented by Firefox.\n\n        if (HAS_SVG_INSTANCE && (p === 'target' || p === 'relatedTarget')) {\n          if (eventCopy[p] instanceof SVGElementInstance) {\n            eventCopy[p] = eventCopy[p].correspondingUseElement;\n          }\n        }\n      } // keep the semantics of preventDefault\n\n\n      if (inEvent.preventDefault) {\n        eventCopy.preventDefault = function () {\n          inEvent.preventDefault();\n        };\n      }\n\n      return eventCopy;\n    },\n    getTarget: function getTarget(inEvent) {\n      var capture = this.captureInfo[inEvent.pointerId];\n\n      if (!capture) {\n        return inEvent._target;\n      }\n\n      if (inEvent._target === capture || !(inEvent.type in BOUNDARY_EVENTS)) {\n        return capture;\n      }\n    },\n    propagate: function propagate(event, fn, propagateDown) {\n      var target = event.target;\n      var targets = []; // Order of conditions due to document.contains() missing in IE.\n\n      while (target != null && target !== document && !target.contains(event.relatedTarget)) {\n        targets.push(target);\n        target = target.parentNode; // Touch: Do not propagate if node is detached.\n\n        if (!target) {\n          return;\n        }\n      }\n\n      if (propagateDown) {\n        targets.reverse();\n      }\n\n      targets.forEach(function (target) {\n        event.target = target;\n        fn.call(this, event);\n      }, this);\n    },\n    setCapture: function setCapture(inPointerId, inTarget, skipDispatch) {\n      if (this.captureInfo[inPointerId]) {\n        this.releaseCapture(inPointerId, skipDispatch);\n      }\n\n      this.captureInfo[inPointerId] = inTarget;\n      this.implicitRelease = this.releaseCapture.bind(this, inPointerId, skipDispatch);\n      document.addEventListener('pointerup', this.implicitRelease);\n      document.addEventListener('pointercancel', this.implicitRelease);\n      var e = new PointerEvent('gotpointercapture', {\n        bubbles: true\n      });\n      e.pointerId = inPointerId;\n      e._target = inTarget;\n\n      if (!skipDispatch) {\n        this.asyncDispatchEvent(e);\n      }\n    },\n    releaseCapture: function releaseCapture(inPointerId, skipDispatch) {\n      var t = this.captureInfo[inPointerId];\n\n      if (!t) {\n        return;\n      }\n\n      this.captureInfo[inPointerId] = undefined;\n      document.removeEventListener('pointerup', this.implicitRelease);\n      document.removeEventListener('pointercancel', this.implicitRelease);\n      var e = new PointerEvent('lostpointercapture', {\n        bubbles: true\n      });\n      e.pointerId = inPointerId;\n      e._target = t;\n\n      if (!skipDispatch) {\n        this.asyncDispatchEvent(e);\n      }\n    },\n\n    /**\n     * Dispatches the event to its target.\n     *\n     * @param {Event} inEvent The event to be dispatched.\n     * @return {Boolean} True if an event handler returns true, false otherwise.\n     */\n    dispatchEvent:\n    /*scope.external.dispatchEvent || */\n    function dispatchEvent(inEvent) {\n      var t = this.getTarget(inEvent);\n\n      if (t) {\n        return t.dispatchEvent(inEvent);\n      }\n    },\n    asyncDispatchEvent: function asyncDispatchEvent(inEvent) {\n      requestAnimationFrame(this.dispatchEvent.bind(this, inEvent));\n    }\n  };\n  dispatcher.boundHandler = dispatcher.eventHandler.bind(dispatcher);\n  var targeting = {\n    shadow: function shadow(inEl) {\n      if (inEl) {\n        return inEl.shadowRoot || inEl.webkitShadowRoot;\n      }\n    },\n    canTarget: function canTarget(shadow) {\n      return shadow && Boolean(shadow.elementFromPoint);\n    },\n    targetingShadow: function targetingShadow(inEl) {\n      var s = this.shadow(inEl);\n\n      if (this.canTarget(s)) {\n        return s;\n      }\n    },\n    olderShadow: function olderShadow(shadow) {\n      var os = shadow.olderShadowRoot;\n\n      if (!os) {\n        var se = shadow.querySelector('shadow');\n\n        if (se) {\n          os = se.olderShadowRoot;\n        }\n      }\n\n      return os;\n    },\n    allShadows: function allShadows(element) {\n      var shadows = [];\n      var s = this.shadow(element);\n\n      while (s) {\n        shadows.push(s);\n        s = this.olderShadow(s);\n      }\n\n      return shadows;\n    },\n    searchRoot: function searchRoot(inRoot, x, y) {\n      if (inRoot) {\n        var t = inRoot.elementFromPoint(x, y);\n        var st, sr; // is element a shadow host?\n\n        sr = this.targetingShadow(t);\n\n        while (sr) {\n          // find the the element inside the shadow root\n          st = sr.elementFromPoint(x, y);\n\n          if (!st) {\n            // check for older shadows\n            sr = this.olderShadow(sr);\n          } else {\n            // shadowed element may contain a shadow root\n            var ssr = this.targetingShadow(st);\n            return this.searchRoot(ssr, x, y) || st;\n          }\n        } // light dom element is the target\n\n\n        return t;\n      }\n    },\n    owner: function owner(element) {\n      var s = element; // walk up until you hit the shadow root or document\n\n      while (s.parentNode) {\n        s = s.parentNode;\n      } // the owner element is expected to be a Document or ShadowRoot\n\n\n      if (s.nodeType !== Node.DOCUMENT_NODE && s.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n        s = document;\n      }\n\n      return s;\n    },\n    findTarget: function findTarget(inEvent) {\n      var x = inEvent.clientX;\n      var y = inEvent.clientY; // if the listener is in the shadow root, it is much faster to start there\n\n      var s = this.owner(inEvent.target); // if x, y is not in this root, fall back to document search\n\n      if (!s.elementFromPoint(x, y)) {\n        s = document;\n      }\n\n      return this.searchRoot(s, x, y);\n    }\n  };\n  var forEach = Array.prototype.forEach.call.bind(Array.prototype.forEach);\n  var map = Array.prototype.map.call.bind(Array.prototype.map);\n  var toArray = Array.prototype.slice.call.bind(Array.prototype.slice);\n  var filter = Array.prototype.filter.call.bind(Array.prototype.filter);\n  var MO = window.MutationObserver || window.WebKitMutationObserver;\n  var SELECTOR = '[touch-action]';\n  var OBSERVER_INIT = {\n    subtree: true,\n    childList: true,\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: ['touch-action']\n  };\n\n  function Installer(add, remove, changed, binder) {\n    this.addCallback = add.bind(binder);\n    this.removeCallback = remove.bind(binder);\n    this.changedCallback = changed.bind(binder);\n\n    if (MO) {\n      this.observer = new MO(this.mutationWatcher.bind(this));\n    }\n  }\n\n  Installer.prototype = {\n    watchSubtree: function watchSubtree(target) {\n      // Only watch scopes that can target find, as these are top-level.\n      // Otherwise we can see duplicate additions and removals that add noise.\n      //\n      // TODO(dfreedman): For some instances with ShadowDOMPolyfill, we can see\n      // a removal without an insertion when a node is redistributed among\n      // shadows. Since it all ends up correct in the document, watching only\n      // the document will yield the correct mutations to watch.\n      if (this.observer && targeting.canTarget(target)) {\n        this.observer.observe(target, OBSERVER_INIT);\n      }\n    },\n    enableOnSubtree: function enableOnSubtree(target) {\n      this.watchSubtree(target);\n\n      if (target === document && document.readyState !== 'complete') {\n        this.installOnLoad();\n      } else {\n        this.installNewSubtree(target);\n      }\n    },\n    installNewSubtree: function installNewSubtree(target) {\n      forEach(this.findElements(target), this.addElement, this);\n    },\n    findElements: function findElements(target) {\n      if (target.querySelectorAll) {\n        return target.querySelectorAll(SELECTOR);\n      }\n\n      return [];\n    },\n    removeElement: function removeElement(el) {\n      this.removeCallback(el);\n    },\n    addElement: function addElement(el) {\n      this.addCallback(el);\n    },\n    elementChanged: function elementChanged(el, oldValue) {\n      this.changedCallback(el, oldValue);\n    },\n    concatLists: function concatLists(accum, list) {\n      return accum.concat(toArray(list));\n    },\n    // register all touch-action = none nodes on document load\n    installOnLoad: function installOnLoad() {\n      document.addEventListener('readystatechange', function () {\n        if (document.readyState === 'complete') {\n          this.installNewSubtree(document);\n        }\n      }.bind(this));\n    },\n    isElement: function isElement(n) {\n      return n.nodeType === Node.ELEMENT_NODE;\n    },\n    flattenMutationTree: function flattenMutationTree(inNodes) {\n      // find children with touch-action\n      var tree = map(inNodes, this.findElements, this); // make sure the added nodes are accounted for\n\n      tree.push(filter(inNodes, this.isElement)); // flatten the list\n\n      return tree.reduce(this.concatLists, []);\n    },\n    mutationWatcher: function mutationWatcher(mutations) {\n      mutations.forEach(this.mutationHandler, this);\n    },\n    mutationHandler: function mutationHandler(m) {\n      if (m.type === 'childList') {\n        var added = this.flattenMutationTree(m.addedNodes);\n        added.forEach(this.addElement, this);\n        var removed = this.flattenMutationTree(m.removedNodes);\n        removed.forEach(this.removeElement, this);\n      } else if (m.type === 'attributes') {\n        this.elementChanged(m.target, m.oldValue);\n      }\n    }\n  };\n\n  function shadowSelector(s) {\n    return 'body /shadow-deep/ ' + s;\n  }\n\n  function rule(v) {\n    return '{ -ms-touch-action: ' + v + '; touch-action: ' + v + '; }';\n  }\n\n  var attrib2css = [{\n    selector: '[touch-action=\"none\"]',\n    value: 'none'\n  }, {\n    selector: '[touch-action=\"auto\"]',\n    value: 'auto'\n  }, {\n    selector: '[touch-action~=\"pan-x\"]',\n    value: 'pan-x'\n  }, {\n    selector: '[touch-action~=\"pan-y\"]',\n    value: 'pan-y'\n  }, {\n    selector: '[touch-action~=\"pan-up\"]',\n    value: 'pan-up'\n  }, {\n    selector: '[touch-action~=\"pan-down\"]',\n    value: 'pan-down'\n  }, {\n    selector: '[touch-action~=\"pan-left\"]',\n    value: 'pan-left'\n  }, {\n    selector: '[touch-action~=\"pan-right\"]',\n    value: 'pan-right'\n  }];\n  var styles = ''; // only install stylesheet if the browser has touch action support\n\n  var hasNativePE = window.PointerEvent || window.MSPointerEvent; // only add shadow selectors if shadowdom is supported\n\n  var hasShadowRoot = !window.ShadowDOMPolyfill && document.head.createShadowRoot;\n\n  function applyAttributeStyles() {\n    if (hasNativePE) {\n      attrib2css.forEach(function (r) {\n        styles += r.selector + rule(r.value) + '\\n';\n\n        if (hasShadowRoot) {\n          styles += shadowSelector(r.selector) + rule(r.value) + '\\n';\n        }\n      });\n      var el = document.createElement('style');\n      el.textContent = styles;\n      document.head.appendChild(el);\n    }\n  }\n\n  var pointermap = dispatcher.pointermap; // radius around touchend that swallows mouse events\n\n  var DEDUP_DIST = 25; // left, middle, right, back, forward\n\n  var BUTTON_TO_BUTTONS = [1, 4, 2, 8, 16];\n  var HAS_BUTTONS = false;\n\n  try {\n    HAS_BUTTONS = new MouseEvent('test', {\n      buttons: 1\n    }).buttons === 1;\n  } catch (e) {} // handler block for native mouse events\n\n\n  var mouseEvents = {\n    POINTER_ID: 1,\n    POINTER_TYPE: 'mouse',\n    events: ['mousedown', 'webkitmouseforcechanged', 'mousemove', 'mouseup', 'mouseover', 'mouseout'],\n    register: function register(target) {\n      dispatcher.listen(target, this.events);\n    },\n    unregister: function unregister(target) {\n      dispatcher.unlisten(target, this.events);\n    },\n    lastTouches: [],\n    // collide with the global mouse listener\n    isEventSimulatedFromTouch: function isEventSimulatedFromTouch(inEvent) {\n      var lts = this.lastTouches;\n      var x = inEvent.clientX;\n      var y = inEvent.clientY;\n\n      for (var i = 0, l = lts.length, t; i < l && (t = lts[i]); i++) {\n        // simulated mouse events will be swallowed near a primary touchend\n        var dx = Math.abs(x - t.x);\n        var dy = Math.abs(y - t.y);\n\n        if (dx <= DEDUP_DIST && dy <= DEDUP_DIST) {\n          return true;\n        }\n      }\n    },\n    prepareEvent: function prepareEvent(inEvent) {\n      var e = dispatcher.cloneEvent(inEvent); // forward mouse preventDefault\n\n      var pd = e.preventDefault;\n\n      e.preventDefault = function () {\n        inEvent.preventDefault();\n        pd();\n      };\n\n      e.pointerId = this.POINTER_ID;\n      e.isPrimary = true;\n      e.pointerType = this.POINTER_TYPE;\n\n      if ('webkitForce' in inEvent) {\n        e.pressure = inEvent.webkitForce - MouseEvent.WEBKIT_FORCE_AT_MOUSE_DOWN;\n      }\n\n      return e;\n    },\n    prepareButtonsForMove: function prepareButtonsForMove(e, inEvent) {\n      var p = pointermap.get(this.POINTER_ID); // Update buttons state after possible out-of-document mouseup.\n\n      if (inEvent.which === 0 || !p) {\n        e.buttons = 0;\n      } else {\n        e.buttons = p.buttons;\n      }\n\n      inEvent.buttons = e.buttons;\n    },\n    mousedown: function mousedown(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var p = pointermap.get(this.POINTER_ID);\n        var e = this.prepareEvent(inEvent);\n\n        if (!HAS_BUTTONS) {\n          e.buttons = BUTTON_TO_BUTTONS[e.button];\n\n          if (p) {\n            e.buttons |= p.buttons;\n          }\n\n          inEvent.buttons = e.buttons;\n        }\n\n        pointermap.set(this.POINTER_ID, inEvent);\n\n        if (!p || p.buttons === 0) {\n          dispatcher.down(e);\n        } else {\n          dispatcher.move(e);\n        }\n      }\n    },\n    // This is called when the user force presses without moving x/y\n    webkitmouseforcechanged: function webkitmouseforcechanged(inEvent) {\n      this.mousemove(inEvent);\n    },\n    mousemove: function mousemove(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n\n        if (!HAS_BUTTONS) {\n          this.prepareButtonsForMove(e, inEvent);\n        }\n\n        e.button = -1;\n        pointermap.set(this.POINTER_ID, inEvent);\n        dispatcher.move(e);\n      }\n    },\n    mouseup: function mouseup(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var p = pointermap.get(this.POINTER_ID);\n        var e = this.prepareEvent(inEvent);\n\n        if (!HAS_BUTTONS) {\n          var up = BUTTON_TO_BUTTONS[e.button]; // Produces wrong state of buttons in Browsers without `buttons` support\n          // when a mouse button that was pressed outside the document is released\n          // inside and other buttons are still pressed down.\n\n          e.buttons = p ? p.buttons & ~up : 0;\n          inEvent.buttons = e.buttons;\n        }\n\n        pointermap.set(this.POINTER_ID, inEvent); // Support: Firefox <=44 only\n        // FF Ubuntu includes the lifted button in the `buttons` property on\n        // mouseup.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1223366\n\n        e.buttons &= ~BUTTON_TO_BUTTONS[e.button];\n\n        if (e.buttons === 0) {\n          dispatcher.up(e);\n        } else {\n          dispatcher.move(e);\n        }\n      }\n    },\n    mouseover: function mouseover(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n\n        if (!HAS_BUTTONS) {\n          this.prepareButtonsForMove(e, inEvent);\n        }\n\n        e.button = -1;\n        pointermap.set(this.POINTER_ID, inEvent);\n        dispatcher.enterOver(e);\n      }\n    },\n    mouseout: function mouseout(inEvent) {\n      if (!this.isEventSimulatedFromTouch(inEvent)) {\n        var e = this.prepareEvent(inEvent);\n\n        if (!HAS_BUTTONS) {\n          this.prepareButtonsForMove(e, inEvent);\n        }\n\n        e.button = -1;\n        dispatcher.leaveOut(e);\n      }\n    },\n    cancel: function cancel(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.cancel(e);\n      this.deactivateMouse();\n    },\n    deactivateMouse: function deactivateMouse() {\n      pointermap.delete(this.POINTER_ID);\n    }\n  };\n  var captureInfo = dispatcher.captureInfo;\n  var findTarget = targeting.findTarget.bind(targeting);\n  var allShadows = targeting.allShadows.bind(targeting);\n  var pointermap$1 = dispatcher.pointermap; // this should be long enough to ignore compat mouse events made by touch\n\n  var DEDUP_TIMEOUT = 2500;\n  var ATTRIB = 'touch-action';\n  var INSTALLER; // bitmask for _scrollType\n\n  var _UP = 1;\n  var _DOWN = 2;\n  var _LEFT = 4;\n  var _RIGHT = 8;\n  var AUTO = _UP | _DOWN | _LEFT | _RIGHT; // handler block for native touch events\n\n  var touchEvents = {\n    events: ['touchstart', 'touchmove', 'touchforcechange', 'touchend', 'touchcancel'],\n    register: function register(target) {\n      INSTALLER.enableOnSubtree(target);\n    },\n    unregister: function unregister() {// TODO(dfreedman): is it worth it to disconnect the MO?\n    },\n    elementAdded: function elementAdded(el) {\n      var a = el.getAttribute(ATTRIB);\n      var st = this.touchActionToScrollType(a);\n\n      if (typeof st === \"number\") {\n        el._scrollType = st;\n        dispatcher.listen(el, this.events); // set touch-action on shadows as well\n\n        allShadows(el).forEach(function (s) {\n          s._scrollType = st;\n          dispatcher.listen(s, this.events);\n        }, this);\n      }\n    },\n    elementRemoved: function elementRemoved(el) {\n      // In some cases, an element is removed before a touchend.\n      // When this is the case, we should wait for the touchend before unlistening,\n      // because we still want pointer events to bubble up after removing from DOM.\n      if (pointermap$1.size > 0) {\n        var evts = this.events;\n        el.addEventListener('touchend', function () {\n          el._scrollType = undefined;\n          dispatcher.unlisten(el, evts);\n        });\n      } else {\n        el._scrollType = undefined;\n        dispatcher.unlisten(el, this.events);\n      } // remove touch-action from shadow\n\n\n      allShadows(el).forEach(function (s) {\n        s._scrollType = undefined;\n        dispatcher.unlisten(s, this.events);\n      }, this);\n    },\n    elementChanged: function elementChanged(el, oldValue) {\n      var a = el.getAttribute(ATTRIB);\n      var st = this.touchActionToScrollType(a);\n      var oldSt = this.touchActionToScrollType(oldValue); // simply update scrollType if listeners are already established\n\n      if (typeof st === \"number\" && typeof oldSt === \"number\") {\n        el._scrollType = st;\n        allShadows(el).forEach(function (s) {\n          s._scrollType = st;\n        }, this);\n      } else if (typeof oldSt === \"number\") {\n        this.elementRemoved(el);\n      } else if (typeof st === \"number\") {\n        this.elementAdded(el);\n      }\n    },\n    scrollTypes: {\n      UP: function UP(s) {\n        return s.includes('pan-y') || s.includes('pan-up') ? _UP : 0;\n      },\n      DOWN: function DOWN(s) {\n        return s.includes('pan-y') || s.includes('pan-down') ? _DOWN : 0;\n      },\n      LEFT: function LEFT(s) {\n        return s.includes('pan-x') || s.includes('pan-left') ? _LEFT : 0;\n      },\n      RIGHT: function RIGHT(s) {\n        return s.includes('pan-x') || s.includes('pan-right') ? _RIGHT : 0;\n      }\n    },\n    touchActionToScrollType: function touchActionToScrollType(touchAction) {\n      if (!touchAction) {\n        return;\n      }\n\n      if (touchAction === \"auto\") {\n        return AUTO;\n      }\n\n      if (touchAction === \"none\") {\n        return 0;\n      }\n\n      var s = touchAction.split(' ');\n      var st = this.scrollTypes; // construct a bitmask of allowed scroll directions\n\n      return st.UP(s) | st.DOWN(s) | st.LEFT(s) | st.RIGHT(s);\n    },\n    POINTER_TYPE: 'touch',\n    firstTouch: null,\n    isPrimaryTouch: function isPrimaryTouch(inTouch) {\n      return this.firstTouch === inTouch.identifier;\n    },\n    setPrimaryTouch: function setPrimaryTouch(inTouch) {\n      // set primary touch if there no pointers, or the only pointer is the mouse\n      if (pointermap$1.size === 0 || pointermap$1.size === 1 && pointermap$1.has(1)) {\n        this.firstTouch = inTouch.identifier;\n        this.firstXY = {\n          X: inTouch.clientX,\n          Y: inTouch.clientY\n        };\n        this.scrolling = false;\n      }\n    },\n    removePrimaryPointer: function removePrimaryPointer(inPointer) {\n      if (inPointer.isPrimary) {\n        this.firstTouch = null;\n        this.firstXY = null;\n      }\n    },\n    typeToButtons: function typeToButtons(type) {\n      var ret = 0;\n\n      if (type === 'touchstart' || type === 'touchmove' || type === 'touchforcechange') {\n        ret = 1;\n      }\n\n      return ret;\n    },\n    touchToPointer: function touchToPointer(inTouch) {\n      var cte = this.currentTouchEvent;\n      var e = dispatcher.cloneEvent(inTouch); // We reserve pointerId 1 for Mouse.\n      // Touch identifiers can start at 0.\n      // Add 2 to the touch identifier for compatibility.\n\n      var id = e.pointerId = inTouch.identifier + 2;\n      e.target = captureInfo[id] || findTarget(e);\n      e.bubbles = true;\n      e.cancelable = true;\n      e.button = 0;\n      e.buttons = this.typeToButtons(cte.type);\n      e.width = (inTouch.radiusX || inTouch.webkitRadiusX || 0) * 2;\n      e.height = (inTouch.radiusY || inTouch.webkitRadiusY || 0) * 2;\n      e.pressure = inTouch.force !== undefined ? inTouch.force : inTouch.webkitForce !== undefined ? inTouch.webkitForce : undefined;\n      e.isPrimary = this.isPrimaryTouch(inTouch);\n\n      if (inTouch.altitudeAngle) {\n        const tan = Math.tan(inTouch.altitudeAngle);\n        const radToDeg = 180 / Math.PI;\n        e.tiltX = Math.atan(Math.cos(inTouch.azimuthAngle) / tan) * radToDeg;\n        e.tiltY = Math.atan(Math.sin(inTouch.azimuthAngle) / tan) * radToDeg;\n      } else {\n        e.tiltX = 0;\n        e.tiltY = 0;\n      }\n\n      if (inTouch.touchType === 'stylus') {\n        e.pointerType = 'pen';\n      } else {\n        e.pointerType = this.POINTER_TYPE;\n      } // forward modifier keys\n\n\n      e.altKey = cte.altKey;\n      e.ctrlKey = cte.ctrlKey;\n      e.metaKey = cte.metaKey;\n      e.shiftKey = cte.shiftKey; // forward touch preventDefaults\n\n      var self = this;\n\n      e.preventDefault = function () {\n        self.scrolling = false;\n        self.firstXY = null;\n        cte.preventDefault();\n      };\n\n      return e;\n    },\n    processTouches: function processTouches(inEvent, inFunction) {\n      var tl = inEvent.changedTouches;\n      this.currentTouchEvent = inEvent;\n\n      for (var i = 0, t; i < tl.length; i++) {\n        t = tl[i];\n        inFunction.call(this, this.touchToPointer(t));\n      }\n    },\n    // For single axis scrollers, determines whether the element should emit\n    // pointer events or behave as a scroller\n    shouldScroll: function shouldScroll(inEvent) {\n      if (this.firstXY) {\n        var ret;\n        var st = inEvent.currentTarget._scrollType;\n\n        if (st === 0) {\n          // this element is a `touch-action: none`, should never scroll\n          ret = false;\n        } else if (st === AUTO) {\n          // this element is a `touch-action: auto`, should always scroll\n          ret = true;\n        } else {\n          var t = inEvent.changedTouches[0];\n          var dy = t.clientY - this.firstXY.Y;\n          var dya = Math.abs(dy);\n          var dx = t.clientX - this.firstXY.X;\n          var dxa = Math.abs(dx);\n          var up = st & _UP;\n          var down = st & _DOWN;\n          var left = st & _LEFT;\n          var right = st & _RIGHT;\n\n          if (left && right) {\n            // should scroll on the x axis\n            ret = dxa > dya;\n          } else if (left) {\n            // should scroll left\n            ret = dxa > dya && dx > 0;\n          } else if (right) {\n            // should scroll right\n            ret = dxa > dya && dx < 0;\n          }\n\n          if (!ret) {\n            if (up && down) {\n              // should scroll on the y axis\n              ret = dxa < dya;\n            } else if (up) {\n              // should scroll up\n              ret = dxa < dya && dy > 0;\n            } else if (down) {\n              // should scroll down\n              ret = dxa < dya && dy < 0;\n            }\n          }\n        }\n\n        this.firstXY = null;\n        return ret;\n      }\n    },\n    findTouch: function findTouch(inTL, inId) {\n      for (var i = 0, l = inTL.length, t; i < l && (t = inTL[i]); i++) {\n        if (t.identifier === inId) {\n          return true;\n        }\n      }\n    },\n    // In some instances, a touchstart can happen without a touchend. This\n    // leaves the pointermap in a broken state.\n    // Therefore, on every touchstart, we remove the touches that did not fire a\n    // touchend event.\n    // To keep state globally consistent, we fire a\n    // pointercancel for this \"abandoned\" touch\n    vacuumTouches: function vacuumTouches(inEvent) {\n      var tl = inEvent.touches; // pointermap.size should be < tl.length here, as the touchstart has not\n      // been processed yet.\n\n      if (pointermap$1.size >= tl.length) {\n        var d = [];\n        pointermap$1.forEach(function (value, key) {\n          // Never remove pointerId == 1, which is mouse.\n          // Touch identifiers are 2 smaller than their pointerId, which is the\n          // index in pointermap.\n          if (key !== 1 && !this.findTouch(tl, key - 2)) {\n            var p = value.out;\n            d.push(p);\n          }\n        }, this);\n        d.forEach(this.cancelOut, this);\n      }\n    },\n    touchstart: function touchstart(inEvent) {\n      this.vacuumTouches(inEvent);\n      this.setPrimaryTouch(inEvent.changedTouches[0]);\n      this.dedupSynthMouse(inEvent);\n\n      if (!this.scrolling) {\n        this.processTouches(inEvent, this.overDown);\n      }\n    },\n    overDown: function overDown(inPointer) {\n      pointermap$1.set(inPointer.pointerId, {\n        target: inPointer.target,\n        out: inPointer,\n        outTarget: inPointer.target\n      });\n      dispatcher.enterOver(inPointer);\n      dispatcher.down(inPointer);\n    },\n    // Called when pressure or tilt changes without the x/y changing\n    touchforcechange: function touchforcechange(inEvent) {\n      this.touchmove(inEvent);\n    },\n    touchmove: function touchmove(inEvent) {\n      if (!this.scrolling) {\n        if (this.shouldScroll(inEvent)) {\n          this.scrolling = true;\n          this.touchcancel(inEvent);\n        } else {\n          inEvent.preventDefault();\n          this.processTouches(inEvent, this.moveOverOut);\n        }\n      }\n    },\n    moveOverOut: function moveOverOut(inPointer) {\n      var event = inPointer;\n      var pointer = pointermap$1.get(event.pointerId); // a finger drifted off the screen, ignore it\n\n      if (!pointer) {\n        return;\n      }\n\n      var outEvent = pointer.out;\n      var outTarget = pointer.outTarget;\n      dispatcher.move(event);\n\n      if (outEvent && outTarget !== event.target) {\n        outEvent.relatedTarget = event.target;\n        event.relatedTarget = outTarget; // recover from retargeting by shadow\n\n        outEvent.target = outTarget;\n\n        if (event.target) {\n          dispatcher.leaveOut(outEvent);\n          dispatcher.enterOver(event);\n        } else {\n          // clean up case when finger leaves the screen\n          event.target = outTarget;\n          event.relatedTarget = null;\n          this.cancelOut(event);\n        }\n      }\n\n      pointer.out = event;\n      pointer.outTarget = event.target;\n    },\n    touchend: function touchend(inEvent) {\n      this.dedupSynthMouse(inEvent);\n      this.processTouches(inEvent, this.upOut);\n    },\n    upOut: function upOut(inPointer) {\n      if (!this.scrolling) {\n        dispatcher.up(inPointer);\n        dispatcher.leaveOut(inPointer);\n      }\n\n      this.cleanUpPointer(inPointer);\n    },\n    touchcancel: function touchcancel(inEvent) {\n      this.processTouches(inEvent, this.cancelOut);\n    },\n    cancelOut: function cancelOut(inPointer) {\n      dispatcher.cancel(inPointer);\n      dispatcher.leaveOut(inPointer);\n      this.cleanUpPointer(inPointer);\n    },\n    cleanUpPointer: function cleanUpPointer(inPointer) {\n      pointermap$1.delete(inPointer.pointerId);\n      this.removePrimaryPointer(inPointer);\n    },\n    // prevent synth mouse events from creating pointer events\n    dedupSynthMouse: function dedupSynthMouse(inEvent) {\n      var lts = mouseEvents.lastTouches;\n      var t = inEvent.changedTouches[0]; // only the primary finger will synth mouse events\n\n      if (this.isPrimaryTouch(t)) {\n        // remember x/y of last touch\n        var lt = {\n          x: t.clientX,\n          y: t.clientY\n        };\n        lts.push(lt);\n\n        var fn = function (lts, lt) {\n          var i = lts.indexOf(lt);\n\n          if (i > -1) {\n            lts.splice(i, 1);\n          }\n        }.bind(null, lts, lt);\n\n        setTimeout(fn, DEDUP_TIMEOUT);\n      }\n    }\n  };\n  INSTALLER = new Installer(touchEvents.elementAdded, touchEvents.elementRemoved, touchEvents.elementChanged, touchEvents);\n  var pointermap$2 = dispatcher.pointermap;\n  var HAS_BITMAP_TYPE = window.MSPointerEvent && typeof window.MSPointerEvent.MSPOINTER_TYPE_MOUSE === 'number';\n  var msEvents = {\n    events: ['MSPointerDown', 'MSPointerMove', 'MSPointerUp', 'MSPointerOut', 'MSPointerOver', 'MSPointerCancel', 'MSGotPointerCapture', 'MSLostPointerCapture'],\n    register: function register(target) {\n      dispatcher.listen(target, this.events);\n    },\n    unregister: function unregister(target) {\n      dispatcher.unlisten(target, this.events);\n    },\n    POINTER_TYPES: ['', 'unavailable', 'touch', 'pen', 'mouse'],\n    prepareEvent: function prepareEvent(inEvent) {\n      var e = inEvent;\n\n      if (HAS_BITMAP_TYPE) {\n        e = dispatcher.cloneEvent(inEvent);\n        e.pointerType = this.POINTER_TYPES[inEvent.pointerType];\n      }\n\n      return e;\n    },\n    cleanup: function cleanup(id) {\n      pointermap$2.delete(id);\n    },\n    MSPointerDown: function MSPointerDown(inEvent) {\n      pointermap$2.set(inEvent.pointerId, inEvent);\n      var e = this.prepareEvent(inEvent);\n      dispatcher.down(e);\n    },\n    MSPointerMove: function MSPointerMove(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.move(e);\n    },\n    MSPointerUp: function MSPointerUp(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.up(e);\n      this.cleanup(inEvent.pointerId);\n    },\n    MSPointerOut: function MSPointerOut(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.leaveOut(e);\n    },\n    MSPointerOver: function MSPointerOver(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.enterOver(e);\n    },\n    MSPointerCancel: function MSPointerCancel(inEvent) {\n      var e = this.prepareEvent(inEvent);\n      dispatcher.cancel(e);\n      this.cleanup(inEvent.pointerId);\n    },\n    MSLostPointerCapture: function MSLostPointerCapture(inEvent) {\n      var e = dispatcher.makeEvent('lostpointercapture', inEvent);\n      dispatcher.dispatchEvent(e);\n    },\n    MSGotPointerCapture: function MSGotPointerCapture(inEvent) {\n      var e = dispatcher.makeEvent('gotpointercapture', inEvent);\n      dispatcher.dispatchEvent(e);\n    }\n  };\n\n  function applyPolyfill() {\n    // only activate if this platform does not have pointer events\n    if (!window.PointerEvent) {\n      window.PointerEvent = PointerEvent;\n\n      if (window.navigator.msPointerEnabled) {\n        var tp = window.navigator.msMaxTouchPoints;\n        Object.defineProperty(window.navigator, 'maxTouchPoints', {\n          value: tp,\n          enumerable: true\n        });\n        dispatcher.registerSource('ms', msEvents);\n      } else {\n        Object.defineProperty(window.navigator, 'maxTouchPoints', {\n          value: 0,\n          enumerable: true\n        });\n        dispatcher.registerSource('mouse', mouseEvents);\n\n        if (window.ontouchstart !== undefined) {\n          dispatcher.registerSource('touch', touchEvents);\n        }\n      }\n\n      dispatcher.register(document);\n    }\n  }\n\n  var n = window.navigator;\n  var s;\n  var r;\n  var h;\n\n  function assertActive(id) {\n    if (!dispatcher.pointermap.has(id)) {\n      var error = new Error('NotFoundError');\n      error.name = 'NotFoundError';\n      throw error;\n    }\n  }\n\n  function assertConnected(elem) {\n    var parent = elem.parentNode;\n\n    while (parent && parent !== elem.ownerDocument) {\n      parent = parent.parentNode;\n    }\n\n    if (!parent) {\n      var error = new Error('InvalidStateError');\n      error.name = 'InvalidStateError';\n      throw error;\n    }\n  }\n\n  function inActiveButtonState(id) {\n    var p = dispatcher.pointermap.get(id);\n    return p.buttons !== 0;\n  }\n\n  if (n.msPointerEnabled) {\n    s = function s(pointerId) {\n      assertActive(pointerId);\n      assertConnected(this);\n\n      if (inActiveButtonState(pointerId)) {\n        dispatcher.setCapture(pointerId, this, true);\n        this.msSetPointerCapture(pointerId);\n      }\n    };\n\n    r = function r(pointerId) {\n      assertActive(pointerId);\n      dispatcher.releaseCapture(pointerId, true);\n      this.msReleasePointerCapture(pointerId);\n    };\n  } else {\n    s = function setPointerCapture(pointerId) {\n      assertActive(pointerId);\n      assertConnected(this);\n\n      if (inActiveButtonState(pointerId)) {\n        dispatcher.setCapture(pointerId, this);\n      }\n    };\n\n    r = function releasePointerCapture(pointerId) {\n      assertActive(pointerId);\n      dispatcher.releaseCapture(pointerId);\n    };\n  }\n\n  h = function hasPointerCapture(pointerId) {\n    return !!dispatcher.captureInfo[pointerId];\n  };\n\n  function applyPolyfill$1() {\n    if (window.Element && !Element.prototype.setPointerCapture) {\n      Object.defineProperties(Element.prototype, {\n        'setPointerCapture': {\n          value: s\n        },\n        'releasePointerCapture': {\n          value: r\n        },\n        'hasPointerCapture': {\n          value: h\n        }\n      });\n    }\n  }\n\n  applyAttributeStyles();\n  applyPolyfill();\n  applyPolyfill$1();\n  var pointerevents = {\n    dispatcher: dispatcher,\n    Installer: Installer,\n    PointerEvent: PointerEvent,\n    PointerMap: PointerMap,\n    targetFinding: targeting\n  };\n  return pointerevents;\n});"],"sourceRoot":""}