{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport ModelContents from '../../../../components/Main/ModelContents/ModelContents';\nimport Loader from '../../../../components/UI/Loader/Loader';\nimport { updateObject } from '../../../../shared/utility';\nimport * as actions from '../../../../store/actions/index';\nimport global from '../../../../../../global/global';\nvar IS_ANIMATED = true;\n\nvar Model =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Model, _Component);\n\n  function Model(props) {\n    var _this;\n\n    _classCallCheck(this, Model);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Model).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"inputChangedHandler\", function (editorState) {\n      _this.setState({\n        inputValue: editorState\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showUserOptHandler\", function (id) {\n      if (_this.state.cntOpt && _this.state.cntOpt.id === id) {\n        _this.setState(function (prevState, props) {\n          return {\n            cntOpt: updateObject(prevState.cntOpt, {\n              visible: !prevState.cntOpt.visible\n            })\n          };\n        });\n\n        return;\n      }\n\n      var newCntOpt = {\n        visible: true,\n        id: id\n      };\n\n      _this.setState({\n        cntOpt: newCntOpt\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeFavoriteHandler\", function (id, isLiked, favAdd) {\n      _this.props.onChangeFav(id, isLiked, favAdd, _this.props.changedFav, _this.props.userID, _this.state.categ);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"showShareHandler\", function (shareID) {\n      _this.props.onChangeShareID(shareID, _this.state.categ);\n\n      _this.props.history.push(\"/view/\".concat(_this.state.categ, \"/share\"));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeMediaHandler\", function (id, maxLength, type) {\n      _this.setState({\n        removePrevMedia: {\n          id: id,\n          type: type\n        },\n        removeAnim: false\n      });\n\n      _this.animateSlider(id, maxLength, type, 900);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"removeAnimHandler\", function (event) {\n      if (!_this.state.removePrevMedia) {\n        _this.setState({\n          removeAnim: true\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"playVideoHandler\", function (snapshot) {\n      _this.props.onFetchVideo(snapshot.id, \"\".concat(window.location.protocol + '//' + window.location.host, \"/media/video/\").concat(snapshot.videoCnt));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"slidePlayHandler\", function (id, maxLength, event) {\n      var slide = event.target;\n      slide.setPointerCapture(event.pointerId);\n\n      _this.setState({\n        playerIcnId: id\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearSlidePlayhandler\", function (event) {\n      var slide = event.target;\n      slide.releasePointerCapture(event.pointerId);\n      slide.style.left = 0 + 'px';\n      var videoPlayerIcn = document.querySelector('.reuse-pt__media--wrapper__icn-move');\n\n      if (videoPlayerIcn) {\n        videoPlayerIcn.style.left = 45 + '%';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"moveSlidePlayHandler\", function (id, maxLength, event) {\n      var slide = event.target;\n\n      if (slide.hasPointerCapture && slide.hasPointerCapture(event.pointerId)) {\n        var newpos = event.clientX - slide.parentElement.offsetLeft - slide.offsetWidth / 2;\n\n        if (newpos < -(slide.offsetWidth / 2 + slide.offsetWidth / 4)) {\n          if (IS_ANIMATED) {\n            IS_ANIMATED = false;\n\n            _this.animateSlider(id, maxLength, 'next', 0);\n          }\n        } else if (newpos > slide.offsetWidth / 2 + slide.offsetWidth / 4) {\n          if (IS_ANIMATED) {\n            IS_ANIMATED = false;\n\n            _this.animateSlider(id, maxLength, 'prev', 0);\n          }\n        }\n\n        var videoPlayerIcn = document.querySelector('.reuse-pt__media--wrapper__icn-move');\n\n        if (videoPlayerIcn) {\n          var playerIcnHeight = newpos / slide.offsetWidth * 100;\n          videoPlayerIcn.style.left = playerIcnHeight + 45 + '%';\n        }\n\n        slide.style.left = newpos + 'px';\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateSlider\", function (id, maxLength, type, timeFrame) {\n      setTimeout(function () {\n        var mediaItms = _toConsumableArray(_this.state.mediaItms);\n\n        var filterMedia = mediaItms.filter(function (media) {\n          return media.id === id;\n        });\n        var mediaDet = {\n          id: id,\n          position: type === 'next' ? maxLength > 1 ? 1 : 0 : maxLength - 1\n        };\n\n        if (filterMedia.length > 0) {\n          var _iteratorNormalCompletion = true;\n          var _didIteratorError = false;\n          var _iteratorError = undefined;\n\n          try {\n            for (var _iterator = _getIterator(filterMedia), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n              var mediaItm = _step.value;\n              mediaDet = {\n                id: mediaItm.id,\n                position: type === 'next' ? mediaItm.position += 1 : mediaItm.position -= 1\n              };\n\n              if (mediaDet.position > maxLength - 1) {\n                mediaDet = updateObject(mediaDet, {\n                  position: 0\n                });\n              }\n\n              if (mediaDet.position < 0) {\n                mediaDet = updateObject(mediaDet, {\n                  position: maxLength - 1\n                });\n              }\n\n              var updateMedia = mediaItms.filter(function (media) {\n                return media.id !== id;\n              });\n              updateMedia.push(mediaDet);\n\n              _this.setState({\n                mediaItms: updateMedia,\n                removeAnim: false,\n                removePrevMedia: null,\n                animateItm: {\n                  id: id,\n                  direction: type\n                }\n              });\n            }\n          } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n          } finally {\n            try {\n              if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n                _iterator[\"return\"]();\n              }\n            } finally {\n              if (_didIteratorError) {\n                throw _iteratorError;\n              }\n            }\n          }\n\n          return;\n        }\n\n        mediaItms.push(mediaDet);\n\n        _this.setState({\n          mediaItms: mediaItms,\n          removeAnim: false,\n          removePrevMedia: null,\n          animateItm: {\n            id: id,\n            direction: type\n          }\n        });\n      }, timeFrame);\n      setTimeout(function () {\n        IS_ANIMATED = true;\n      }, 500);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"changeCntHandler\", function (id, title, det) {\n      var checkTitle = String(title).length > 50 ? String(title).substr(0, 50) + '...' : title;\n\n      _this.props.onChangeCnt(id, checkTitle, det, false, _this.state.categ);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"scrollHandler\", function () {\n      document.querySelector('.reuse-view__form--field__wrapper').scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"replyHandler\", function (commentID) {\n      // this.props.history.push(`/view/reply/${this.state.categ}?id=${}`)\n      _this.props.onSetCommentID(commentID, _this.state.categ);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"correctHandler\", function (commentID, type, replyID) {\n      _this.props.onAnsCorrect(commentID, type, replyID);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"wrongHandler\", function (commentID, type, replyID) {\n      _this.props.onAnsWrong(commentID, type, replyID);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"submitCommentHandler\", function () {\n      var cnt = _JSON$stringify(convertToRaw(_this.state.inputValue.getCurrentContent()));\n\n      _this.props.onSubmitComment(_this.state.id, _this.state.categ, cnt);\n\n      _this.setState({\n        submitStart: true\n      });\n    });\n\n    var these = _assertThisInitialized(_this);\n\n    _this.state = {\n      cntOpt: null,\n      categ: _this.props.router.query.categ,\n      id: _this.props.router.query.id,\n      mediaItms: [],\n      animateItm: null,\n      removeAnim: false,\n      removePrevMedia: null,\n      playerIcnId: null,\n      animationComplete: true,\n      inputValue: EditorState.createEmpty(),\n      submitStart: false\n    };\n    return _this;\n  }\n\n  _createClass(Model, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.submitStart && this.props.resetInput) {\n        this.setState({\n          inputValue: EditorState.createEmpty(),\n          submitStart: false\n        });\n        this.props.onResetInput();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.props.onFetchShareActive();\n      this.props.onFetchNotifyActive();\n\n      var cnt = __jsx(Loader, {\n        view: true\n      });\n\n      if (this.props.cntErr) {\n        cnt = null;\n      }\n\n      if (!this.state.categ || !this.state.id) {}\n\n      if (this.props.cnts) {\n        cnt = __jsx(ModelContents, {\n          cnt: this.props.cnts,\n          userOpt: this.showUserOptHandler,\n          showCntOpt: this.state.cntOpt,\n          cntGrp: this.state.categ,\n          fav: this.changeFavoriteHandler,\n          changedFav: this.props.changedFav,\n          favChange: this.props.favChange,\n          share: this.showShareHandler,\n          nextMedia: this.changeMediaHandler,\n          prevMedia: this.changeMediaHandler,\n          mediaItms: this.state.mediaItms,\n          removeAnim: this.removeAnimHandler,\n          disableAnim: this.state.removeAnim,\n          animateItm: this.state.animateItm,\n          removePrevMedia: this.state.removePrevMedia,\n          playVideo: this.playVideoHandler,\n          videoErr: this.props.videoErr,\n          video: this.props.postVideo,\n          playerIcnId: this.state.playerIcnId,\n          slidePlay: this.slidePlayHandler,\n          moveSlidePlay: this.moveSlidePlayHandler,\n          clearSlidePlay: this.clearSlidePlayhandler,\n          changeCnt: this.changeCntHandler,\n          scroll: this.scrollHandler,\n          inputValue: this.state.inputValue,\n          inputChanged: this.inputChangedHandler,\n          submitComment: this.submitCommentHandler,\n          comments: this.props.comments,\n          submitEnable: this.props.submitStart || String(convertToRaw(this.state.inputValue.getCurrentContent()).blocks[0].text).length < 1,\n          reply: this.replyHandler,\n          correct: this.correctHandler,\n          wrong: this.wrongHandler,\n          commentTotal: this.props.commentTotal,\n          url: \"https://slodge24.com/robotonly/rbview/\".concat(this.state.categ, \"/\").concat(this.state.id)\n        });\n      }\n\n      return cnt;\n    }\n  }]);\n\n  return Model;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    status: state.auth.status,\n    cnts: state.cnt.cnts,\n    cntErr: state.cnt.cntErr,\n    changedFav: state.cnt.changedFav,\n    favChange: state.cnt.favChange,\n    videoErr: state.cnt.videoErr,\n    postVideo: state.cnt.postVideo,\n    filterDet: state.cnt.filterDet,\n    comments: state.cnt.comments,\n    submitStart: state.cnt.submitStart,\n    resetInput: state.cnt.resetInput,\n    commentID: state.cnt.commentID,\n    show: state.trd.show,\n    commentTotal: state.cnt.commentTotal\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onFetchShareActive: function onFetchShareActive() {\n      return dispatch(actions.fetchShareactiveInit());\n    },\n    onFetchNotifyActive: function onFetchNotifyActive() {\n      return dispatch(actions.fetchNotifyactiveInit());\n    },\n    onFetchCnt: function onFetchCnt(categ, id) {\n      return dispatch(actions.fetchCntInit(categ, id));\n    },\n    onFetchCntReset: function onFetchCntReset() {\n      return dispatch(actions.fetchCntReset());\n    },\n    onChangeTag: function onChangeTag(path) {\n      return dispatch(actions.changeTagsPath(path));\n    },\n    onChangeCnt: function onChangeCnt(id, title, det, confirm, modelType) {\n      return dispatch(actions.changeCntInit(id, title, det, confirm, modelType));\n    },\n    onChangeFav: function onChangeFav(id, liked, favAdd, changedFav, userID, cntGrp) {\n      return dispatch(actions.changeFavInit(id, liked, favAdd, changedFav, userID, cntGrp));\n    },\n    onChangeShareID: function onChangeShareID(shareID, categ) {\n      return dispatch(actions.shareID(shareID, categ));\n    },\n    onFetchVideo: function onFetchVideo(id, url) {\n      return dispatch(actions.fetchVideo(id, url));\n    },\n    onSubmitComment: function onSubmitComment(id, cntGp, cnt) {\n      return dispatch(actions.submitCommentInit(id, cntGp, cnt));\n    },\n    onResetInput: function onResetInput() {\n      return dispatch(actions.resetInput());\n    },\n    onDefaultTrd: function onDefaultTrd() {\n      return dispatch(actions.defaultTrd());\n    },\n    onAnsCorrect: function onAnsCorrect(commentID, categ, replyID, modelType) {\n      return dispatch(actions.ansCorrectInit(commentID, categ, replyID, modelType));\n    },\n    onAnsWrong: function onAnsWrong(commentID, categ, replyID) {\n      return dispatch(actions.ansWrongInit(commentID, categ, replyID));\n    },\n    onSubmitSuccess: function onSubmitSuccess(id, cntGrp, msg) {\n      return dispatch(actions.submitComment(id, cntGrp, msg));\n    },\n    onJoinErr: function onJoinErr(err) {\n      return dispatch(actions.submitCommentFail(err));\n    },\n    onSetCommentID: function onSetCommentID(commentID, categ) {\n      return dispatch(actions.setCommentID(commentID, categ));\n    }\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Model));","map":null,"metadata":{},"sourceType":"module"}