{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { put, delay } from 'redux-saga/effects';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nimport fileAxios from 'axios';\nimport { dataURLtoBlob } from '../../shared/utility';\nimport global from '../../../../global/global';\nexport function* fetchCntInitSaga(action) {\n  try {\n    const response = yield axios.post('/header', {\n      id: action.id,\n      model: 'post'\n    }, {\n      headers: {\n        'data-categ': `editform`\n      }\n    });\n\n    if (response.data && (response.data.image.length > 0 || response.data.snapshot.length > 0)) {\n      let images = [];\n      let snaps = [];\n\n      for (let image of response.data.image) {\n        images.push(_objectSpread({\n          url: `${global.url}/media/image/${image.id}`\n        }, image, {\n          mediaType: 'image'\n        }));\n      }\n\n      for (let snap of response.data.snapshot) {\n        let video = response.data.video.filter(videoDet => videoDet.snapshotID === snap.videoID);\n        snaps.push(_objectSpread({\n          url: `${global.url}/media/image/${snap.id}`\n        }, snap, {\n          mediaType: 'snapshot',\n          video: video[0]\n        }));\n      }\n\n      response.data.image = images;\n      response.data.snapshot = snaps;\n      response.data.video = [];\n    }\n\n    yield put(actions.fetchCnt(response.data));\n  } catch (err) {\n    yield put(actions.fetchCntFail(err));\n  }\n}\nexport function* fetchVideoInitSaga(action) {\n  try {\n    let videos = [];\n    let video = 0;\n\n    if (action.videosID.length < 1) {\n      yield put(actions.fetchVideo([]));\n      return;\n    }\n\n    for (let vid of action.videosID) {\n      let media = yield axios.post('/media', {\n        mediaID: vid.id\n      }, {\n        headers: {\n          'data-categ': 'media'\n        }\n      });\n      let vidData = dataURLtoBlob(media.data);\n      let url = window.URL.createObjectURL(vidData);\n      ++video;\n      videos.push({\n        file: vidData,\n        url,\n        id: vid.snapshotID\n      });\n\n      if (video === action.videosID.length) {\n        yield put(actions.fetchVideo(videos));\n      }\n    }\n  } catch (err) {\n    yield put(actions.fetchVideoFail(err));\n  }\n}\nexport function* fetchCategInitSaga(action) {\n  try {\n    yield put(actions.fetchCategStart());\n    const category = yield axios.post('/post', null, {\n      headers: {\n        'data-categ': 'postCateg'\n      }\n    });\n    const categ = category.data && category.data.length > 0 ? category.data : null;\n    yield put(actions.fetchCateg(categ));\n  } catch (err) {\n    yield put(actions.fetchCategFail(err));\n    yield delay(2000);\n    yield put(actions.fetchCategReset());\n  }\n}\nexport function* addCategInitSaga(action) {\n  let categs = String(action.categ).split(',');\n  let transformCateg = [];\n\n  for (let categ of categs) {\n    transformCateg.push(String(categ).trim().charAt(0).toUpperCase() + String(categ).trim().toLowerCase().slice(1));\n  }\n\n  let removeDuplicate = [...new Set(transformCateg)];\n  yield put(actions.addCateg(removeDuplicate));\n}\nexport function* checkLinkInitSaga(action) {\n  let link = String(action.link).trim();\n\n  try {\n    let response = yield fileAxios.get(link, {\n      responseType: 'blob',\n      timeout: 8000\n    });\n\n    if (response.data.type.startsWith(action.mediaType + '/')) {\n      yield put(actions.checkLink(null, {\n        file: response.data,\n        url: window.URL.createObjectURL(response.data)\n      }));\n      return;\n    }\n\n    throw new Error(`Unknown format, Only ${action.mediaType} files`);\n  } catch (err) {\n    yield put(actions.checkLink(err, null));\n  }\n}\nexport function* fetchUsersInitSaga(action) {\n  try {\n    let response = yield axios.post('/users', null, {\n      headers: {\n        'data-categ': `allteacher-${action.userStatus}`\n      }\n    });\n    yield put(actions.fetchUsers(response.data, action.userStatus));\n  } catch (err) {\n    yield put(actions.fetchUsersFail(err));\n  }\n}\nexport function* filterUserInitSaga(action) {\n  let filterUser = action.users.filter(user => user.username.toLowerCase().indexOf(action.filterContent.toLowerCase()) !== -1);\n\n  if (!action.filterContent && action.users && action.users.length > 0) {\n    filterUser = [...action.users];\n  }\n\n  yield put(actions.filterUser(filterUser));\n}\nexport function* showUserSelectInitSaga(action) {\n  let filterUser = action.users.filter(user => action.userID.indexOf(user.id) !== -1);\n  yield put(actions.showUserSelect(filterUser));\n}","map":null,"metadata":{},"sourceType":"module"}