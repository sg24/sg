{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { EditorState, convertToRaw } from 'draft-js';\nimport ModelContents from '../../../../components/Main/ModelContents/ModelContents';\nimport Loader from '../../../../components/UI/Loader/Loader';\nimport { updateObject } from '../../../../shared/utility';\nimport * as actions from '../../../../store/actions/index';\nimport global from '../../../../../../global/global';\nlet IS_ANIMATED = true;\n\nclass Model extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"inputChangedHandler\", editorState => {\n      this.setState({\n        inputValue: editorState\n      });\n    });\n\n    _defineProperty(this, \"showUserOptHandler\", id => {\n      if (this.state.cntOpt && this.state.cntOpt.id === id) {\n        this.setState((prevState, props) => {\n          return {\n            cntOpt: updateObject(prevState.cntOpt, {\n              visible: !prevState.cntOpt.visible\n            })\n          };\n        });\n        return;\n      }\n\n      const newCntOpt = {\n        visible: true,\n        id\n      };\n      this.setState({\n        cntOpt: newCntOpt\n      });\n    });\n\n    _defineProperty(this, \"changeFavoriteHandler\", (id, isLiked, favAdd) => {\n      this.props.onChangeFav(id, isLiked, favAdd, this.props.changedFav, this.props.userID, this.state.categ);\n    });\n\n    _defineProperty(this, \"showShareHandler\", shareID => {\n      this.props.onChangeShareID(shareID, this.state.categ);\n      this.props.history.push(`/view/${this.state.categ}/share`);\n    });\n\n    _defineProperty(this, \"changeMediaHandler\", (id, maxLength, type) => {\n      this.setState({\n        removePrevMedia: {\n          id,\n          type\n        },\n        removeAnim: false\n      });\n      this.animateSlider(id, maxLength, type, 900);\n    });\n\n    _defineProperty(this, \"removeAnimHandler\", event => {\n      if (!this.state.removePrevMedia) {\n        this.setState({\n          removeAnim: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"playVideoHandler\", snapshot => {\n      this.props.onFetchVideo(snapshot.id, `${window.location.protocol + '//' + window.location.host}/media/video/${snapshot.videoCnt}`);\n    });\n\n    _defineProperty(this, \"slidePlayHandler\", (id, maxLength, event) => {\n      let slide = event.target;\n      slide.setPointerCapture(event.pointerId);\n      this.setState({\n        playerIcnId: id\n      });\n    });\n\n    _defineProperty(this, \"clearSlidePlayhandler\", event => {\n      let slide = event.target;\n      slide.releasePointerCapture(event.pointerId);\n      slide.style.left = 0 + 'px';\n      let videoPlayerIcn = document.querySelector('.reuse-pt__media--wrapper__icn-move');\n\n      if (videoPlayerIcn) {\n        videoPlayerIcn.style.left = 45 + '%';\n      }\n    });\n\n    _defineProperty(this, \"moveSlidePlayHandler\", (id, maxLength, event) => {\n      let slide = event.target;\n\n      if (slide.hasPointerCapture && slide.hasPointerCapture(event.pointerId)) {\n        let newpos = event.clientX - slide.parentElement.offsetLeft - slide.offsetWidth / 2;\n\n        if (newpos < -(slide.offsetWidth / 2 + slide.offsetWidth / 4)) {\n          if (IS_ANIMATED) {\n            IS_ANIMATED = false;\n            this.animateSlider(id, maxLength, 'next', 0);\n          }\n        } else if (newpos > slide.offsetWidth / 2 + slide.offsetWidth / 4) {\n          if (IS_ANIMATED) {\n            IS_ANIMATED = false;\n            this.animateSlider(id, maxLength, 'prev', 0);\n          }\n        }\n\n        let videoPlayerIcn = document.querySelector('.reuse-pt__media--wrapper__icn-move');\n\n        if (videoPlayerIcn) {\n          let playerIcnHeight = newpos / slide.offsetWidth * 100;\n          videoPlayerIcn.style.left = playerIcnHeight + 45 + '%';\n        }\n\n        slide.style.left = newpos + 'px';\n      }\n    });\n\n    _defineProperty(this, \"animateSlider\", (id, maxLength, type, timeFrame) => {\n      setTimeout(() => {\n        let mediaItms = [...this.state.mediaItms];\n        let filterMedia = mediaItms.filter(media => media.id === id);\n        let mediaDet = {\n          id,\n          position: type === 'next' ? maxLength > 1 ? 1 : 0 : maxLength - 1\n        };\n\n        if (filterMedia.length > 0) {\n          for (let mediaItm of filterMedia) {\n            mediaDet = {\n              id: mediaItm.id,\n              position: type === 'next' ? mediaItm.position += 1 : mediaItm.position -= 1\n            };\n\n            if (mediaDet.position > maxLength - 1) {\n              mediaDet = updateObject(mediaDet, {\n                position: 0\n              });\n            }\n\n            if (mediaDet.position < 0) {\n              mediaDet = updateObject(mediaDet, {\n                position: maxLength - 1\n              });\n            }\n\n            let updateMedia = mediaItms.filter(media => media.id !== id);\n            updateMedia.push(mediaDet);\n            this.setState({\n              mediaItms: updateMedia,\n              removeAnim: false,\n              removePrevMedia: null,\n              animateItm: {\n                id,\n                direction: type\n              }\n            });\n          }\n\n          return;\n        }\n\n        mediaItms.push(mediaDet);\n        this.setState({\n          mediaItms,\n          removeAnim: false,\n          removePrevMedia: null,\n          animateItm: {\n            id,\n            direction: type\n          }\n        });\n      }, timeFrame);\n      setTimeout(() => {\n        IS_ANIMATED = true;\n      }, 500);\n    });\n\n    _defineProperty(this, \"changeCntHandler\", (id, title, det) => {\n      let checkTitle = String(title).length > 50 ? String(title).substr(0, 50) + '...' : title;\n      this.props.onChangeCnt(id, checkTitle, det, false, this.state.categ);\n    });\n\n    _defineProperty(this, \"scrollHandler\", () => {\n      document.querySelector('.reuse-view__form--field__wrapper').scrollIntoView({\n        behavior: 'smooth'\n      });\n    });\n\n    _defineProperty(this, \"replyHandler\", commentID => {\n      // this.props.history.push(`/view/reply/${this.state.categ}?id=${}`)\n      this.props.onSetCommentID(commentID, this.state.categ);\n    });\n\n    _defineProperty(this, \"correctHandler\", (commentID, type, replyID) => {\n      this.props.onAnsCorrect(commentID, type, replyID);\n    });\n\n    _defineProperty(this, \"wrongHandler\", (commentID, type, replyID) => {\n      this.props.onAnsWrong(commentID, type, replyID);\n    });\n\n    _defineProperty(this, \"submitCommentHandler\", () => {\n      let cnt = JSON.stringify(convertToRaw(this.state.inputValue.getCurrentContent()));\n      this.props.onSubmitComment(this.state.id, this.state.categ, cnt);\n      this.setState({\n        submitStart: true\n      });\n    });\n\n    let these = this;\n    this.state = {\n      cntOpt: null,\n      categ: this.props.router.query.categ,\n      id: this.props.router.query.id,\n      mediaItms: [],\n      animateItm: null,\n      removeAnim: false,\n      removePrevMedia: null,\n      playerIcnId: null,\n      animationComplete: true,\n      inputValue: EditorState.createEmpty(),\n      submitStart: false\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.submitStart && this.props.resetInput) {\n      this.setState({\n        inputValue: EditorState.createEmpty(),\n        submitStart: false\n      });\n      this.props.onResetInput();\n    }\n  }\n\n  render() {\n    this.props.onFetchShareActive();\n    this.props.onFetchNotifyActive();\n\n    let cnt = __jsx(Loader, {\n      view: true\n    });\n\n    if (this.props.cntErr) {\n      cnt = null;\n    }\n\n    if (!this.state.categ || !this.state.id) {}\n\n    if (this.props.cnts) {\n      cnt = __jsx(ModelContents, {\n        cnt: this.props.cnts,\n        userOpt: this.showUserOptHandler,\n        showCntOpt: this.state.cntOpt,\n        cntGrp: this.state.categ,\n        fav: this.changeFavoriteHandler,\n        changedFav: this.props.changedFav,\n        favChange: this.props.favChange,\n        share: this.showShareHandler,\n        nextMedia: this.changeMediaHandler,\n        prevMedia: this.changeMediaHandler,\n        mediaItms: this.state.mediaItms,\n        removeAnim: this.removeAnimHandler,\n        disableAnim: this.state.removeAnim,\n        animateItm: this.state.animateItm,\n        removePrevMedia: this.state.removePrevMedia,\n        playVideo: this.playVideoHandler,\n        videoErr: this.props.videoErr,\n        video: this.props.postVideo,\n        playerIcnId: this.state.playerIcnId,\n        slidePlay: this.slidePlayHandler,\n        moveSlidePlay: this.moveSlidePlayHandler,\n        clearSlidePlay: this.clearSlidePlayhandler,\n        changeCnt: this.changeCntHandler,\n        scroll: this.scrollHandler,\n        inputValue: this.state.inputValue,\n        inputChanged: this.inputChangedHandler,\n        submitComment: this.submitCommentHandler,\n        comments: this.props.comments,\n        submitEnable: this.props.submitStart || String(convertToRaw(this.state.inputValue.getCurrentContent()).blocks[0].text).length < 1,\n        reply: this.replyHandler,\n        correct: this.correctHandler,\n        wrong: this.wrongHandler,\n        commentTotal: this.props.commentTotal,\n        url: `https://slodge24.com/robotonly/rbview/${this.state.categ}/${this.state.id}`\n      });\n    }\n\n    return cnt;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.auth.status,\n    cnts: state.cnt.cnts,\n    cntErr: state.cnt.cntErr,\n    changedFav: state.cnt.changedFav,\n    favChange: state.cnt.favChange,\n    videoErr: state.cnt.videoErr,\n    postVideo: state.cnt.postVideo,\n    filterDet: state.cnt.filterDet,\n    comments: state.cnt.comments,\n    submitStart: state.cnt.submitStart,\n    resetInput: state.cnt.resetInput,\n    commentID: state.cnt.commentID,\n    show: state.trd.show,\n    commentTotal: state.cnt.commentTotal\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchShareActive: () => dispatch(actions.fetchShareactiveInit()),\n    onFetchNotifyActive: () => dispatch(actions.fetchNotifyactiveInit()),\n    onFetchCnt: (categ, id) => dispatch(actions.fetchCntInit(categ, id)),\n    onFetchCntReset: () => dispatch(actions.fetchCntReset()),\n    onChangeTag: path => dispatch(actions.changeTagsPath(path)),\n    onChangeCnt: (id, title, det, confirm, modelType) => dispatch(actions.changeCntInit(id, title, det, confirm, modelType)),\n    onChangeFav: (id, liked, favAdd, changedFav, userID, cntGrp) => dispatch(actions.changeFavInit(id, liked, favAdd, changedFav, userID, cntGrp)),\n    onChangeShareID: (shareID, categ) => dispatch(actions.shareID(shareID, categ)),\n    onFetchVideo: (id, url) => dispatch(actions.fetchVideo(id, url)),\n    onSubmitComment: (id, cntGp, cnt) => dispatch(actions.submitCommentInit(id, cntGp, cnt)),\n    onResetInput: () => dispatch(actions.resetInput()),\n    onDefaultTrd: () => dispatch(actions.defaultTrd()),\n    onAnsCorrect: (commentID, categ, replyID, modelType) => dispatch(actions.ansCorrectInit(commentID, categ, replyID, modelType)),\n    onAnsWrong: (commentID, categ, replyID) => dispatch(actions.ansWrongInit(commentID, categ, replyID)),\n    onSubmitSuccess: (id, cntGrp, msg) => dispatch(actions.submitComment(id, cntGrp, msg)),\n    onJoinErr: err => dispatch(actions.submitCommentFail(err)),\n    onSetCommentID: (commentID, categ) => dispatch(actions.setCommentID(commentID, categ))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Model));","map":null,"metadata":{},"sourceType":"module"}