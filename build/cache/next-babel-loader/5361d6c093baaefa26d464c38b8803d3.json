{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport * as actions from '../../../store/actions/index';\nimport MainNavigations from '../../../components/MainNavigations/MainNavigations';\nimport Loader from '../../../components/UI/Loader/Loader';\n\nclass MainContent extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      post: {\n        path: '/index/post',\n        icnGrp: 'newspaper',\n        icnClass: 'icon icon__site-main__content--tab',\n        title: 'News feed'\n      },\n      questions: {\n        path: '/index/question',\n        icnGrp: 'question',\n        icnClass: 'icon icon__site-main__content--tab',\n        title: 'Questions'\n      },\n      // group: {\n      //     path: '/index/group',\n      //     icnGrp: 'users',\n      //     icnClass: 'icon icon__site-main__content--tab',\n      //     title: 'Groups'\n      // },\n      user: {\n        path: '/index/user',\n        icnGrp: 'users',\n        icnClass: 'icon icon__site-main__content--tab',\n        title: 'Scholars'\n      },\n      helpme: {\n        path: '/index/helpme',\n        icnGrp: 'hand-paper',\n        icnClass: 'icon icon__site-main__content--tab',\n        title: 'Q Chat'\n      },\n      poet: {\n        path: '/index/poet',\n        icnGrp: 'book',\n        icnClass: 'icon icon__site-main__content--tab',\n        title: 'Writers'\n      },\n      curTab: this.props.router.pathname.split('/')[2] ? this.props.router.pathname.split('/')[2] : 'post',\n      cntFetch: false\n    });\n\n    _defineProperty(this, \"removeActiveHandler\", curTab => {\n      if (this.state.curTab !== curTab) {\n        this.props.onResetActive(this.props.userID, curTab);\n        this.setState({\n          curTab\n        });\n      }\n    });\n  }\n\n  componentDidUpdate() {\n    if (this.props.cntFetch && !this.state.cntFetch) {\n      this.props.onResetActive(this.props.userID, this.state.curTab);\n      this.setState({\n        cntFetch: true\n      });\n    }\n  }\n\n  render() {\n    let loaderCnt = null;\n\n    if (this.props.showLoader) {\n      loaderCnt = __jsx(\"div\", {\n        className: \"site-main__content--loader\"\n      }, __jsx(Loader, null));\n    }\n\n    return __jsx(\"div\", {\n      className: \"site-main__content\"\n    }, __jsx(\"div\", {\n      className: \"site-main__content--wrapper\"\n    }, __jsx(\"ul\", {\n      className: \"site-main__content--tab\"\n    }, __jsx(MainNavigations, {\n      content: this.state.post,\n      removeActive: this.removeActiveHandler.bind(this, 'post'),\n      active: this.state.curTab !== 'post' ? this.props.ptActive : null\n    }), __jsx(MainNavigations, {\n      content: this.state.questions,\n      removeActive: this.removeActiveHandler.bind(this, 'question'),\n      active: this.state.curTab !== 'question' ? this.props.queActive : null\n    }), __jsx(MainNavigations, {\n      content: this.state.helpme,\n      removeActive: this.removeActiveHandler.bind(this, 'helpme'),\n      active: this.state.curTab !== 'helpme' ? this.props.shareCntActive : null\n    }), __jsx(MainNavigations, {\n      content: this.state.user,\n      removeActive: this.removeActiveHandler.bind(this, 'user'),\n      active: this.state.curTab !== 'user' ? this.props.reqActive : null\n    }), __jsx(MainNavigations, {\n      content: this.state.poet,\n      removeActive: this.removeActiveHandler.bind(this, 'poet'),\n      active: this.state.curTab !== 'poet' ? this.props.cntActive : null\n    })), this.props.children, loaderCnt));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.auth.userID,\n    shareCntActive: state.main.shareCntActive,\n    cntActive: state.main.cntActive,\n    ptActive: state.main.ptActive,\n    queActive: state.main.queActive,\n    reqActive: state.main.reqActive,\n    cntFetch: state.cnt.cnts !== null,\n    showLoader: state.cnt.showLoader\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onResetActive: (userID, curTab) => dispatch(actions.resetActiveInit(userID, curTab))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(MainContent));","map":null,"metadata":{},"sourceType":"module"}