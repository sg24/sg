{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const updateObject = (oldObject, updatedProperties) => {\n  return _objectSpread({}, oldObject, {}, updatedProperties);\n};\nexport const transformNumber = favNumber => {\n  const favNumArray = String(favNumber).split(\"\");\n\n  if (favNumArray.length === 4) {\n    return `${favNumArray[0]}K`;\n  }\n\n  if (favNumArray.length === 5) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}K`;\n  }\n\n  if (favNumArray.length === 6) {\n    const favNum = favNumArray[0] + favNumArray[1] + favNumArray[2];\n    return `${favNum}K`;\n  }\n\n  if (favNumArray.length === 7) {\n    const favNum = favNumArray[0];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 8) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 9) {\n    const favNum = favNumArray[0] + favNumArray[1] + favNumArray[2];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 10) {\n    const favNum = favNumArray[0];\n    return `${favNum}B`;\n  }\n\n  if (favNumArray.length === 11) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}B`;\n  }\n\n  return favNumber;\n};\nexport const transformString = val => {\n  const curVal = String(val).substr(0, 115);\n  return curVal;\n};\nexport function changeFav(id, liked, favAdd, changedFav) {\n  let changedFavorites = [...changedFav];\n  let favDets = changedFavorites.filter(fav => fav.id === id);\n\n  for (let favDet of favDets) {\n    return updateFavs(favDet);\n  }\n\n  let newChangedFav = {\n    id,\n    liked,\n    favAdd\n  };\n  return updateFavs(newChangedFav);\n\n  function updateFavs(favDet) {\n    favDet = updateObject(favDet, {\n      liked: !favDet.liked\n    });\n\n    if (favDet.liked) {\n      favDet = updateObject(favDet, {\n        favAdd: favDet.favAdd + 1\n      });\n    } else {\n      favDet = updateObject(favDet, {\n        favAdd: favDet.favAdd - 1\n      });\n    }\n\n    let updateChangeFav = changedFavorites.filter(fav => fav.id !== id);\n    updateChangeFav.push(favDet);\n    return {\n      favDet,\n      updateChangeFav\n    };\n  }\n}\n;\nexport const engStrings = {\n  suffixAgo: 'ago',\n  seconds: 'sec',\n  minute: '%d min',\n  minutes: '%d min',\n  hour: '%d hr',\n  hours: '%d hrs',\n  day: '%d day',\n  days: '%d days',\n  month: '%d month',\n  months: '%d months',\n  year: '%d yr',\n  years: '%d yrs'\n};\nexport function changeMode(oldCnts, changeCntStart, field, isUpdate) {\n  let cnts = [...oldCnts];\n  let curIndex;\n  let user = cnts.filter((userFnd, index) => {\n    if (userFnd.id === changeCntStart.id) {\n      curIndex = index;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (user.length > 0) {\n    let updateUser = _objectSpread({}, user[0]);\n\n    updateUser['pending'] = false;\n    updateUser['request'] = false;\n    updateUser['accept'] = false;\n    updateUser[field] = isUpdate;\n    cnts[curIndex] = updateUser;\n    return cnts;\n  }\n\n  return oldCnts;\n}","map":null,"metadata":{},"sourceType":"module"}