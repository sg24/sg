{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions/index';\nimport MainContent from './MainContent/MainContent';\nimport MainNav from './MainNav/MainNav';\nimport asyncComponent from '../../hoc/asyncComponent/asyncComponent';\nimport Backdrop from '../../components/UI/Backdrop/Backdrop';\nimport Modal from '../../components/UI/Modal/Modal';\nimport MainFilter from '../../components/MainFilter/MainFilter';\nimport Loader from '../../components/UI/Loader/Loader';\nimport NoAcc from '../../components/Main/NoAcc/NoAcc';\nimport Editor from './MainContent/MainModel/ModelEditor/ModelEditor'; // const AsyncShare = asyncComponent(() => {\n//     return import ('./Share/Share');\n// });\n\nclass SiteMain extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"checkHeaderDefault\", () => {\n      if (!this.props.default) {\n        this.props.onNavDefault();\n      }\n    });\n\n    _defineProperty(this, \"closeHeaderFilterHandler\", () => {\n      this.props.onCloseHeaderFilter();\n    });\n\n    _defineProperty(this, \"viewCntHandler\", searchDet => {\n      window.location.assign('/view/' + searchDet.grp + '/' + searchDet.id);\n    });\n\n    _defineProperty(this, \"changeCntHandler\", () => {\n      this.props.onChangeCnt(this.props.changeCntStart.id, null, this.props.changeCntStart.det, true, this.props.changeCntStart.modelType);\n    });\n\n    _defineProperty(this, \"closeChangeCntHandler\", () => {\n      this.props.onCloseChangeCnt();\n    });\n\n    _defineProperty(this, \"closeBackdropHandler\", () => {\n      this.props.onCloseBackdrop();\n    });\n  }\n\n  render() {\n    let filterCnt = __jsx(Loader, null);\n\n    if (!this.props.searchCntErr && this.props.searchCnt && this.props.searchCnt.length > 0) {\n      filterCnt = __jsx(\"ul\", null, __jsx(MainFilter, {\n        filterResults: this.props.searchCnt,\n        filterPos: this.props.filterPos,\n        filterLastPos: this.props.filterLastPos,\n        viewCnt: this.viewCntHandler\n      }));\n    }\n\n    if (!this.props.searchCntErr && this.props.searchCnt && this.props.searchCnt.length === 0) {\n      filterCnt = __jsx(NoAcc, {\n        isAuth: this.props.status,\n        det: \"No content found!\",\n        icn: \"clone\",\n        filter: true\n      });\n    }\n\n    if (this.props.searchCntErr) {\n      filterCnt = __jsx(\"div\", {\n        className: \"site-main__content--filter__err\"\n      }, this.props.searchCntErr.message);\n    }\n\n    return __jsx(\"div\", {\n      className: \"site-main site-main__expage\",\n      onClick: this.checkHeaderDefault\n    }, __jsx(\"div\", {\n      className: \"wrapper__exmain\"\n    }, this.props.cntErr ? __jsx(Backdrop, {\n      component: Modal,\n      close: this.closeBackdropHandler,\n      err: this.props.cntErr\n    }) : null, __jsx(MainContent, null), __jsx(MainNav, null)), this.props.filterStart ? __jsx(\"div\", {\n      className: \"site-main__content--filter\",\n      onClick: this.closeHeaderFilterHandler\n    }, __jsx(\"div\", {\n      className: \"site-main__content--filter__wrapper\"\n    }, filterCnt)) : null, this.props.changeCntStart !== null ? __jsx(Backdrop, {\n      show: this.props.showBackdrop,\n      component: Modal,\n      close: this.closeBackdropHandler,\n      err: this.props.changeCntErr,\n      warn: {\n        msg: this.props.changeCntStart.det === 'delete' ? 'Are you sure you want to delete this ' : this.props.changeCntStart.det === 'draft' || this.props.changeCntStart.det === 'publish' ? 'Are you sure you want to change the mode' : this.props.changeCntStart.det === 'blockUser' ? 'Are you sure you want to block this user' : this.props.changeCntStart.det === 'rejUser' ? 'Are you sure you want to reject this user' : this.props.changeCntStart.det === 'acceptUser' ? 'Are you sure you want to accept this user' : this.props.changeCntStart.det === 'cancelReq' ? 'Are you sure you want to Cancel the request, sent to this user' : 'Are you sure you want to remove this user',\n        cnt: this.props.changeCntStart.title,\n        det: this.props.changeCntStart.det\n      },\n      exit: {\n        msg: this.props.changeCntStart.det === 'delete' ? 'Deleted Successfully' : this.props.changeCntStart.det === 'draft' || this.props.changeCntStart.det === 'publish' ? 'Mode change successfully' : this.props.changeCntStart.det === 'authUser' ? 'user added Successfully' : 'Mode change successfully',\n        close: this.props.changeCnt\n      },\n      changeCnt: this.changeCntHandler,\n      closeChangeCnt: this.closeChangeCntHandler\n    }) : null, this.props.commentID ? __jsx(Editor, {\n      id: this.props.commentID.id,\n      categ: this.props.commentID.categ\n    }) : null);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.auth.status,\n    default: state.header.default,\n    showBackdrop: state.main.showBackdrop,\n    cntErr: state.cnt.cntErr,\n    filterStart: state.header.filterStart,\n    searchCnt: state.header.searchCnt,\n    searchCntErr: state.header.searchCntErr,\n    filterPos: state.header.filterPos,\n    filterLastPos: state.header.filterLastPos,\n    changeCntStart: state.cnt.changeCntStart,\n    changeCntErr: state.cnt.changeCntErr,\n    changeCnt: state.cnt.changeCnt,\n    commentID: state.cnt.commentID\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onNavDefault: () => dispatch(actions.headerNavDefault()),\n    onCloseHeaderFilter: () => dispatch(actions.headerFilterClose()),\n    onChangeCnt: (id, title, det, confirm, modelType) => dispatch(actions.changeCntInit(id, title, det, confirm, modelType)),\n    onCloseChangeCnt: () => dispatch(actions.changeCntCancel()),\n    onCloseBackdrop: () => dispatch(actions.resetModel())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SiteMain);","map":null,"metadata":{},"sourceType":"module"}