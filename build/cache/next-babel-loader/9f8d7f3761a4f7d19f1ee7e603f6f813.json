{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAuth),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchCnt),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchShare),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchTags),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchTrd),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSetQue),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchConv),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHeader),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMain),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, all, takeLatest } from 'redux-saga/effects';\nimport * as actionTypes from '../../store/actions/actionTypes';\nimport { checkAuthInitSaga } from './auth';\nimport { fetchCntInitSaga, ansCorrectInitSaga, ansWrongInitSaga, changeFavSaga, changeCntInitSaga } from './model';\nimport { fetchUsersInitSaga, filterUserInitSaga, filterUserSelectInitSaga, shareUserInitSaga } from './share';\nimport { fetchTagsInitSaga } from './tags';\nimport { fetchTrdInitSaga } from './trend';\nimport { fetchCategInitSaga } from './setQue';\nimport { fetchConvInitSaga } from './conv';\nimport { fetchNotifyInitSaga, changeFavNotifySaga, fetchNavlistInitSaga, fetchNotifyActiveInitSaga, defaultNotifyActiveInitSaga, headerFilterInitSaga } from './header';\nimport { fetchShareActiveInitSaga, resetActiveInitSaga } from './main';\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeEvery(actionTypes.CHECK_AUTH_INIT, checkAuthInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function watchCnt() {\n  return _regeneratorRuntime.wrap(function watchCnt$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeLatest(actionTypes.FETCH_CNT_INIT, fetchCntInitSaga), takeLatest(actionTypes.ANS_CORRECT_INIT, ansCorrectInitSaga), takeLatest(actionTypes.ANS_WRONG_INIT, ansWrongInitSaga), takeEvery(actionTypes.CHANGE_FAVORITE_INIT, changeFavSaga), takeLatest(actionTypes.CHANGE_CNT_INIT, changeCntInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function watchShare() {\n  return _regeneratorRuntime.wrap(function watchShare$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.FETCH_USERS_INIT, fetchUsersInitSaga), takeEvery(actionTypes.FILTER_USER_INIT, filterUserInitSaga), takeEvery(actionTypes.FILTER_USER_SELECT_INIT, filterUserSelectInitSaga), takeEvery(actionTypes.SHARE_USER_INIT, shareUserInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchTags() {\n  return _regeneratorRuntime.wrap(function watchTags$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(actionTypes.FETCH_TAGS_INIT, fetchTagsInitSaga);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function watchTrd() {\n  return _regeneratorRuntime.wrap(function watchTrd$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeEvery(actionTypes.FETCH_TRD_INIT, fetchTrdInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\nexport function watchSetQue() {\n  return _regeneratorRuntime.wrap(function watchSetQue$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(actionTypes.FETCH_CATEG_INIT, fetchCategInitSaga);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function watchConv() {\n  return _regeneratorRuntime.wrap(function watchConv$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return takeEvery(actionTypes.FETCH_CONV_INIT, fetchConvInitSaga);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}\nexport function watchHeader() {\n  return _regeneratorRuntime.wrap(function watchHeader$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return all([takeEvery(actionTypes.FETCH_NOTIFY_INIT, fetchNotifyInitSaga), takeEvery(actionTypes.CHANGE_FAVORITE_NOTIFY_INIT, changeFavNotifySaga), takeEvery(actionTypes.FETCH_NAVLIST_INIT, fetchNavlistInitSaga), takeEvery(actionTypes.FETCH_NOTIFY_ACTIVE_INIT, fetchNotifyActiveInitSaga), takeEvery(actionTypes.DEFAULT_NOTIFYACTIVE_INIT, defaultNotifyActiveInitSaga), takeEvery(actionTypes.FETCH_SHARE_ACTIVE_INIT, fetchShareActiveInitSaga), takeEvery(actionTypes.HEADER_FILTER_INIT, headerFilterInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n}\nexport function watchMain() {\n  return _regeneratorRuntime.wrap(function watchMain$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return all([takeEvery(actionTypes.FETCH_SHARE_ACTIVE_INIT, fetchShareActiveInitSaga), takeEvery(actionTypes.RESET_ACTIVE_INIT, resetActiveInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9);\n}\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([watchAuth(), watchCnt(), watchTags(), watchTrd(), watchShare(), watchSetQue(), watchConv(), watchHeader(), watchMain()]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n}","map":null,"metadata":{},"sourceType":"module"}