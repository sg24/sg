{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport { EditorState, convertToRaw } from 'draft-js'; // import { Editor } from 'react-draft-wysiwyg';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './ModelEditor.css';\nimport './react-draft-wysiwyg.css';\nimport * as actions from '../../../../../store/actions/index';\n\nclass ModelEditor extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"inputChangedHandler\", editorState => {\n      this.setState({\n        inputValue: editorState\n      });\n    });\n\n    _defineProperty(this, \"closeEditorHandler\", () => {\n      this.props.onResetInput();\n    });\n\n    _defineProperty(this, \"submitReplyHandler\", () => {\n      let cnt = JSON.stringify(convertToRaw(this.state.inputValue.getCurrentContent()));\n      this.props.onSubmitComment(this.props.id, this.props.categ, cnt, 'reply');\n      this.setState({\n        submitStart: true\n      });\n    });\n\n    this.state = {\n      inputValue: EditorState.createEmpty(),\n      submitStart: false\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.submitStart && this.props.resetInput) {\n      this.setState({\n        inputValue: EditorState.createEmpty(),\n        submitStart: false\n      });\n      this.props.onResetInput();\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"reuse-view__editor--wrapper\"\n    }, __jsx(\"div\", {\n      className: \"reuse-view__editor--backdrop\",\n      onClick: this.closeEditorHandler\n    }), __jsx(\"div\", {\n      className: \"reuse-view__editor\"\n    }, __jsx(\"div\", {\n      className: \"reuse-view__editor--main-close\",\n      onClick: this.closeEditorHandler\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fas', 'times'],\n      className: \"\"\n    })), __jsx(\"div\", {\n      className: \"reuse-view__editor--content\"\n    }, __jsx(\"div\", {\n      className: \"reuse-view__form--field__wrapper\"\n    })), __jsx(\"div\", {\n      className: \"reuse-view__editor--footer\"\n    }, __jsx(\"button\", {\n      type: \"button\",\n      disabled: this.props.submitStart || String(convertToRaw(this.state.inputValue.getCurrentContent()).blocks[0].text).length < 1,\n      onClick: this.submitReplyHandler\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fas', 'reply'],\n      className: \"icon icon__reuse-view--reply\"\n    }), \"Reply\"))));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    submitStart: state.cnt.submitStart,\n    resetInput: state.cnt.resetInput\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmitComment: (id, cntGp, cnt, modelType) => dispatch(actions.submitCommentInit(id, cntGp, cnt, modelType)),\n    onSubmitSuccess: (id, cntGrp, msg) => dispatch(actions.submitComment(id, cntGrp, msg)),\n    onResetInput: () => dispatch(actions.resetInput())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(ModelEditor));","map":null,"metadata":{},"sourceType":"module"}