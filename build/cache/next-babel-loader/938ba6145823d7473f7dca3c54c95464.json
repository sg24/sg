{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // import './Form.css';\n\nimport * as actions from '../../../../store/actions/index';\nimport Logo from '../../../../components/UI/Logo/Logo';\nimport Loader from '../../../../components/UI/Loader/Loader';\nimport Modal from '../../../../components/UI/Modal/Modal';\nimport Aux from '../../../../hoc/Auxs/Auxs';\nimport { updateObject, checkValidity } from '../../../../shared/utility';\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      formElement: {\n        username: {\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      confirmPass: {\n        value: '',\n        valid: false,\n        touched: false,\n        err: null\n      },\n      field: {\n        type: 'password',\n        isChange: false\n      },\n      formIsValid: false\n    });\n\n    _defineProperty(this, \"changeFieldHandler\", () => {\n      if (this.state.field.isChange) {\n        this.setState({\n          field: updateObject(this.state.field, {\n            type: 'password',\n            isChange: false\n          })\n        });\n        return;\n      }\n\n      this.setState({\n        field: updateObject(this.state.field, {\n          type: 'text',\n          isChange: true\n        })\n      });\n    });\n\n    _defineProperty(this, \"inputChangedHandler\", (event, inputType) => {\n      let updateFormType = updateObject(this.state.formElement[inputType], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.formElement[inputType].validation),\n        touched: true\n      });\n      let formIsValid = true;\n      let updateFormElement = updateObject(this.state.formElement, {\n        [inputType]: updateFormType\n      });\n\n      for (let inputType in updateFormElement) {\n        formIsValid = updateFormElement[inputType].valid && formIsValid;\n      }\n\n      this.setState({\n        formElement: updateFormElement,\n        formIsValid,\n        confirmPass: this.state.confirmPass.touched && inputType === 'password' && this.state.confirmPass.value !== event.target.value ? updateObject(this.state.confirmPass, {\n          valid: false,\n          err: 'Password does not match'\n        }) : !this.state.confirmPass.touched ? this.state.confirmPass : updateObject(this.state.confirmPass, {\n          valid: true,\n          err: null\n        })\n      });\n    });\n\n    _defineProperty(this, \"confirmPasswordHandler\", event => {\n      let value = event.target.value;\n\n      if (this.state.formElement.password.value && this.state.formElement.password.valid) {\n        if (this.state.formElement.password.value === event.target.value) {\n          this.setState({\n            confirmPass: updateObject(this.state.confirmPass, {\n              value,\n              valid: true,\n              err: null\n            })\n          });\n          return;\n        }\n\n        this.setState({\n          confirmPass: updateObject(this.state.confirmPass, {\n            value,\n            valid: false,\n            touched: true,\n            err: 'Password does not match'\n          })\n        });\n        return;\n      }\n\n      this.setState({\n        confirmPass: updateObject(this.state.confirmPass, {\n          value,\n          valid: false,\n          touched: true,\n          err: 'Please, enter valid password'\n        })\n      });\n    });\n\n    _defineProperty(this, \"submitHandler\", event => {\n      event.preventDefault();\n\n      if (this.state.formIsValid && this.state.confirmPass.valid) {\n        let newCnt = {\n          username: this.state.formElement.username.value,\n          password: this.state.formElement.password.value,\n          email: this.state.formElement.email.value\n        };\n        this.props.onSubmitForm(newCnt);\n        return;\n      }\n    });\n  }\n\n  render() {\n    let cnt = __jsx(Aux, null, __jsx(Logo, null), __jsx(\"div\", {\n      className: \"reuse-form__cnt\"\n    }, __jsx(\"div\", {\n      className: \"reuse-form__cnt--header\"\n    }, __jsx(\"h4\", null, \"Welcome to Slodge24\"), __jsx(\"p\", null, \"Knowledge sharing platform | Connecting scholars\")), __jsx(\"div\", {\n      className: \"reuse-form__cnt--main-wrapper\"\n    }, __jsx(\"h4\", null, \"Login with\"), __jsx(\"ul\", null, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"/auth/google\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fab', 'google']\n    }))), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"/auth/facebook\"\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fab', 'facebook-f']\n    }))))), __jsx(\"div\", {\n      className: \"reuse-form__cnt--alt\"\n    }, \"OR\"), this.props.submitError ? __jsx(\"div\", {\n      className: \"reuse-form__err\"\n    }, this.props.submitError.message) : null, __jsx(\"div\", {\n      className: \"reuse-form__cnt--main-wrapper\"\n    }, __jsx(\"div\", {\n      className: \"reuse-form__cnt--wrapper\"\n    }, __jsx(\"label\", {\n      className: \"reuse-form__cnt--title\"\n    }, \"Username\"), __jsx(\"div\", {\n      className: \"reuse-form__cnt--det\"\n    }, __jsx(\"input\", {\n      type: \"text\",\n      className: \"reuse-form__cnt--det__input\",\n      required: true,\n      minLength: \"6\",\n      value: this.state.formElement.username.value,\n      onChange: event => this.inputChangedHandler(event, 'username')\n    })), !this.state.formElement.username.valid && this.state.formElement.username.touched ? __jsx(\"div\", {\n      className: \"reuse-form__err\"\n    }, \"Username must be longer than 6 characters\") : null), __jsx(\"div\", {\n      className: \"reuse-form__cnt--wrapper\"\n    }, __jsx(\"label\", {\n      className: \"reuse-form__cnt--title\"\n    }, \"Email Address\"), __jsx(\"div\", {\n      className: \"reuse-form__cnt--det\"\n    }, __jsx(\"input\", {\n      type: \"email\",\n      className: \"reuse-form__cnt--det__input\",\n      required: true,\n      minLength: \"6\",\n      value: this.state.formElement.email.value,\n      onChange: event => this.inputChangedHandler(event, 'email')\n    })), !this.state.formElement.email.valid && this.state.formElement.email.touched ? __jsx(\"div\", {\n      className: \"reuse-form__err\"\n    }, \"Email must be longer than 6 characters\") : null), __jsx(\"div\", {\n      className: \"reuse-form__cnt--wrapper\"\n    }, __jsx(\"label\", {\n      className: \"reuse-form__cnt--title\"\n    }, \"Password\"), __jsx(\"div\", {\n      className: \"reuse-form__cnt--det\"\n    }, __jsx(\"input\", {\n      type: this.state.field.type,\n      className: \"reuse-form__cnt--det__input reuse-form__cnt--det__input--pwd\",\n      required: true,\n      minLength: \"6\",\n      value: this.state.formElement.password.value,\n      onChange: event => this.inputChangedHandler(event, 'password')\n    }), __jsx(\"div\", {\n      className: \"reuse-form__cnt--det__pwd\",\n      onClick: this.changeFieldHandler\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['far', 'eye'],\n      className: \"icon icon__reuse-form--view\"\n    }))), !this.state.formElement.password.valid && this.state.formElement.password.touched ? __jsx(\"div\", {\n      className: \"reuse-form__err\"\n    }, \"Password must be longer than 5 characters\") : null), __jsx(\"div\", {\n      className: \"reuse-form__cnt--wrapper\"\n    }, __jsx(\"label\", {\n      className: \"reuse-form__cnt--title\"\n    }, \"Confirm Password\"), __jsx(\"div\", {\n      className: \"reuse-form__cnt--det\"\n    }, __jsx(\"input\", {\n      type: \"password\",\n      className: \"reuse-form__cnt--det__input\",\n      required: true,\n      value: this.state.confirmPass.value,\n      onChange: event => this.confirmPasswordHandler(event)\n    })), this.state.confirmPass.err ? __jsx(\"div\", {\n      className: \"reuse-form__err\"\n    }, this.state.confirmPass.err) : null), __jsx(\"div\", {\n      className: \"reuse-form__cnt--footer reuse-form__btn\"\n    }, __jsx(\"button\", {\n      type: \"submit\",\n      className: \"reuse-form__btn--nxt\",\n      disabled: this.state.formIsValid && this.state.confirmPass.valid && this.props.start ? false : true\n    }, __jsx(FontAwesomeIcon, {\n      icon: ['fas', 'angle-double-right'],\n      className: \"icon icon__reuse-form--btn\"\n    }), \"Next\", !this.props.start ? __jsx(Loader, null) : null))), __jsx(\"p\", null, \"Forgot password \", __jsx(\"a\", {\n      href: \"/forget/password\"\n    }, \"Retrive\")), __jsx(\"p\", null, \"Already have an account \", __jsx(\"a\", {\n      href: \"/login\"\n    }, \"Login in\"))), __jsx(\"ul\", {\n      className: \"reuse-form__footer\"\n    }, __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"/privacy\"\n    }, \"Privacy policy\")), __jsx(\"li\", {\n      className: \"reuse-form__footer--copy\"\n    }, \"\\xA9 Slodge24 , 2020\"), __jsx(\"li\", null, __jsx(\"a\", {\n      href: \"/term\"\n    }, \"Terms of service\"))));\n\n    if (this.props.submitted) {\n      // cnt = <Modal email={this.state.formElement.email.value} />\n      window.location.assign('/index/post');\n    }\n\n    return __jsx(\"form\", {\n      className: \"reuse-form\",\n      onSubmit: this.submitHandler\n    }, __jsx(\"div\", {\n      className: \"reuse-form__wrapper\"\n    }, cnt));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.auth.userID,\n    submitError: state.form.submitError,\n    submitted: state.form.submitted,\n    start: state.form.start\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSubmitForm: formData => dispatch(actions.submitFormInit(formData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":null,"metadata":{},"sourceType":"module"}