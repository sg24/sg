{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const updateObject = (oldObject, updatedProperties) => {\n  return _objectSpread({}, oldObject, {}, updatedProperties);\n};\nexport const transformNumber = favNumber => {\n  const favNumArray = String(favNumber).split(\"\");\n\n  if (favNumArray.length === 4) {\n    return `${favNumArray[0]}K`;\n  }\n\n  if (favNumArray.length === 5) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}K`;\n  }\n\n  if (favNumArray.length === 6) {\n    const favNum = favNumArray[0] + favNumArray[1] + favNumArray[2];\n    return `${favNum}K`;\n  }\n\n  if (favNumArray.length === 7) {\n    const favNum = favNumArray[0];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 8) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 9) {\n    const favNum = favNumArray[0] + favNumArray[1] + favNumArray[2];\n    return `${favNum}M`;\n  }\n\n  if (favNumArray.length === 10) {\n    const favNum = favNumArray[0];\n    return `${favNum}B`;\n  }\n\n  if (favNumArray.length === 11) {\n    const favNum = favNumArray[0] + favNumArray[1];\n    return `${favNum}B`;\n  }\n\n  return favNumber;\n};\nexport const transformString = val => {\n  const curVal = String(val).substr(0, 115);\n  return curVal;\n};\nexport function changeFav(datas, dataID) {\n  const dataArray = [...datas];\n  let dtIndex;\n  let dtArray = dataArray.filter((data, index) => {\n    if (data.id === dataID) {\n      dtIndex = index;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (dtArray.length > 0) {\n    let data = dtArray[0];\n    data = updateObject(data, {\n      liked: !data.liked\n    });\n\n    if (data.liked) {\n      data = updateObject(data, {\n        favorite: data.favorite + 1\n      });\n    } else {\n      data = updateObject(data, {\n        favorite: data.favorite - 1\n      });\n    }\n\n    const updateDataArray = [...dataArray];\n    updateDataArray[dtIndex] = data;\n    let updateStartArray = [...updateDataArray];\n    data = updateObject(data, {\n      changeFavActive: data.liked\n    });\n    updateStartArray[dtIndex] = data;\n    return {\n      updateStartArray,\n      updateDataArray\n    };\n  }\n\n  return dataArray;\n}\n;\nexport const checkValidity = (value, rules) => {\n  let isValid = true;\n\n  if (!rules) {\n    return true;\n  }\n\n  if (rules.required) {\n    isValid = value.trim() !== '' && isValid;\n  }\n\n  if (rules.minLength) {\n    isValid = value.length >= rules.minLength && isValid;\n  }\n\n  return isValid;\n};\nexport const getSnapshot = (url, mediaType) => {\n  let canvas = document.createElement('canvas');\n  return new Promise((resolve, reject) => {\n    if (canvas.getContext) {\n      let media = document.createElement(mediaType);\n\n      function multipleEventListener(el, mediaLoadHandler) {\n        'loadedmetadata loadeddata suspend'.split(' ').forEach(event => {\n          el.addEventListener(event, mediaLoadHandler, false);\n        });\n      }\n\n      media.src = url;\n      multipleEventListener(media, mediaLoadHandler);\n      let event_fired = 0;\n\n      function mediaLoadHandler() {\n        if (++event_fired === 3) {\n          media.currentTime = 1000;\n          media.addEventListener('seeked', function (event) {\n            canvas.width = media.videoWidth;\n            canvas.height = media.videoHeight;\n            canvas.getContext('2d').drawImage(media, 0, 0);\n            let snapshot = canvas.toDataURL('image/png');\n            resolve(snapshot);\n          });\n        }\n      }\n    } else {\n      reject('Please update your Browser');\n    }\n  });\n};\nexport const getImageURL = url => {\n  let image = new Image();\n  image.src = url;\n  let canvas = document.createElement('canvas');\n  return new Promise((resolve, reject) => {\n    if (canvas.getContext) {\n      image.onload = function () {\n        canvas.width = image.naturalWidth;\n        canvas.height = image.naturalHeight;\n        canvas.getContext('2d').drawImage(image, 0, 0);\n        let snapShot = canvas.toDataURL('image/png');\n        resolve(snapShot);\n      };\n    } else {\n      reject('Please update your Browser');\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}