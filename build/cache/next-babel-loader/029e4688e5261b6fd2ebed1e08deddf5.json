{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'next/router';\nimport Poet from '../../../../components/Main/Poet/Poet';\nimport Loader from '../../../../components/UI/Loader/Loader';\nimport NoAcc from '../../../../components/Main/NoAcc/NoAcc';\nimport { updateObject } from '../../../../shared/utility';\nimport * as actions from '../../../../store/actions/index';\nimport App from '../../../../App';\n\nclass Model extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onScroll\", () => {\n      if (false) {\n        if (document.documentElement.scrollHeight - document.documentElement.scrollTop === document.documentElement.clientHeight) {\n          this.props.onFetchCnt(this.props.userID, 'poet', this.state.fetchLimit, this.props.skipCnt + this.state.fetchLimit, this.props.cntTotal);\n        }\n      }\n    });\n\n    _defineProperty(this, \"showUserOptHandler\", id => {\n      if (this.state.cntOpt && this.state.cntOpt.id === id) {\n        this.setState((prevState, props) => {\n          return {\n            cntOpt: updateObject(prevState.cntOpt, {\n              visible: !prevState.cntOpt.visible\n            })\n          };\n        });\n        return;\n      }\n\n      const newCntOpt = {\n        visible: true,\n        id\n      };\n      this.setState({\n        cntOpt: newCntOpt\n      });\n    });\n\n    _defineProperty(this, \"changeFavoriteHandler\", (id, isLiked, favAdd, cntGrp) => {\n      this.props.onChangeFav(id, isLiked, favAdd, this.props.changedFav, this.props.userID, cntGrp);\n    });\n\n    _defineProperty(this, \"showShareHandler\", shareID => {\n      this.props.onChangeShareID(shareID, 'poet');\n      this.props.history.push('/index/poet/share');\n    });\n\n    _defineProperty(this, \"changeCntHandler\", (id, title, det, modelType) => {\n      let checkTitle = String(title).length > 50 ? String(title).substr(0, 50) + '...' : title;\n      this.props.onChangeCnt(id, checkTitle, det, false, modelType);\n    });\n\n    let limit = 0;\n\n    if (false) {\n      if (window.innerHeight >= 1200) {\n        limit = 18;\n      } else if (window.innerHeight >= 900) {\n        limit = 12;\n      } else if (window.innerHeight >= 500) {\n        limit = 9;\n      } else {\n        limit = 6;\n      }\n    }\n\n    this.state = {\n      cntOpt: null,\n      fetchLimit: limit,\n      filterTag: 'poet',\n      mediaItms: [],\n      animateItm: null,\n      removeAnim: false,\n      removePrevMedia: null,\n      playerIcnId: null,\n      animationComplete: true,\n      scrollEnable: false\n    };\n  }\n\n  componentDidMount() {// this.props.onFetchCnt(this.props.userID, this.state.filterTag, this.state.fetchLimit, 0, 0);\n    // this.props.onChangeTag('/poet');\n  }\n\n  componentDidUpdate() {\n    if (this.props.cnts && this.props.cnts.length > 0 && !this.state.scrollEnable) {\n      window.addEventListener('scroll', this.onScroll, false);\n      this.setState({\n        scrollEnable: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onFetchCntReset();\n    window.removeEventListener('scroll', this.onScroll, false);\n  }\n\n  render() {\n    this.props.onFetchShareActive();\n    this.props.onFetchShareCntActive();\n    this.props.onFetchNotifyActive();\n    this.props.onFetchPtActive();\n    this.props.onFetchQueActive();\n    this.props.onFetchCntActive();\n    this.props.onFetchReqActive();\n\n    let cnt = __jsx(Loader, null);\n\n    if (this.props.cntErr) {\n      cnt = null;\n    }\n\n    if (this.props.cnts && this.props.cnts.length === 0) {\n      cnt = __jsx(NoAcc, {\n        isAuth: this.props.userID !== null,\n        det: \"No content found!\",\n        icn: \"clone\",\n        filter: true\n      });\n    }\n\n    if (this.props.cnts && this.props.cnts.length === 0) {\n      cnt = __jsx(NoAcc, {\n        isAuth: this.props.userID !== null,\n        det: \"No content found!\",\n        icn: \"clone\",\n        filter: true\n      });\n    }\n\n    if (this.props.cnts && this.props.cnts.length > 0) {\n      cnt = __jsx(Poet, {\n        content: this.props.cnts,\n        media: this.props.media,\n        userOpt: this.showUserOptHandler,\n        showCntOpt: this.state.cntOpt,\n        fav: this.changeFavoriteHandler,\n        changedFav: this.props.changedFav,\n        favChange: this.props.favChange,\n        share: this.showShareHandler,\n        changeCnt: this.changeCntHandler\n      });\n    }\n\n    return __jsx(App, null, cnt);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userID: state.auth.userID,\n    cnts: state.cnt.cnts,\n    cntErr: state.cnt.cntErr,\n    skipCnt: state.cnt.skipCnt,\n    cntTotal: state.cnt.cntTotal,\n    changedFav: state.cnt.changedFav,\n    favChange: state.cnt.favChange,\n    filterDet: state.cnt.filterDet\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchShareActive: () => dispatch(actions.fetchShareactiveInit()),\n    onFetchShareCntActive: () => dispatch(actions.fetchShareCntactiveInit()),\n    onFetchNotifyActive: () => dispatch(actions.fetchNotifyactiveInit()),\n    onFetchPtActive: () => dispatch(actions.fetchPtActiveInit()),\n    onFetchQueActive: () => dispatch(actions.fetchQueActiveInit()),\n    onFetchCntActive: () => dispatch(actions.fetchCntActiveInit()),\n    onFetchReqActive: () => dispatch(actions.fetchReqActiveInit()),\n    onFetchCnt: (userID, fetchType, limit, skipCnt, cntTotal) => dispatch(actions.fetchCntInit(userID, fetchType, limit, skipCnt, cntTotal)),\n    onFetchCntReset: () => dispatch(actions.fetchCntReset()),\n    onChangeFav: (id, liked, favAdd, changedFav, userID, cntGrp) => dispatch(actions.changeFavInit(id, liked, favAdd, changedFav, userID, cntGrp)),\n    onChangeShareID: (shareID, cntType) => dispatch(actions.shareID(shareID, cntType)),\n    onChangeTag: path => dispatch(actions.changeTagsPath(path)),\n    onChangeCnt: (id, title, det, confirm, modelType) => dispatch(actions.changeCntInit(id, title, det, confirm, modelType))\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Model));","map":null,"metadata":{},"sourceType":"module"}