{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { put, delay } from 'redux-saga/effects';\nimport { changeFav } from '../../shared/utility';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nimport global from '../../../../global/global';\nexport function* fetchCntInitSaga(action) {\n  try {\n    let response = yield axios.post(`/view/${action.categ}/${action.id}`, null, {\n      headers: {\n        'data-categ': 'viewcnt'\n      }\n    });\n\n    if (response.data) {\n      let images = [];\n      let snaps = [];\n\n      for (let image of response.data.image) {\n        images.push(_objectSpread({\n          url: `${global.url}/media/image/${image.id}`\n        }, image, {\n          mediaType: 'image'\n        }));\n      }\n\n      for (let snap of response.data.snapshot) {\n        snaps.push(_objectSpread({\n          url: `${global.url}/media/image/${snap.id}`\n        }, snap, {\n          mediaType: 'snapshot'\n        }));\n      }\n\n      response.data.image = images;\n      response.data.snapshot = snaps;\n      response.data.video = [];\n      yield put(actions.fetchCnt(response.data));\n    }\n  } catch (err) {\n    yield put(actions.fetchCntFail(err));\n  }\n}\nexport function* ansCorrectInitSaga(action) {\n  try {\n    if (action.categ === 'reply') {\n      yield axios.patch('/view', {\n        id: action.commentID,\n        replyID: action.replyID\n      }, {\n        headers: {\n          'data-categ': 'answercorretreply'\n        }\n      });\n    } else if (action.categ === 'smile') {\n      yield axios.patch('/view', {\n        id: action.commentID\n      }, {\n        headers: {\n          'data-categ': 'smile'\n        }\n      });\n    } else if (action.categ === 'smilereply') {\n      yield axios.patch('/view', {\n        id: action.commentID,\n        replyID: action.replyID\n      }, {\n        headers: {\n          'data-categ': 'smilereply'\n        }\n      });\n    } else {\n      yield axios.patch('/view', {\n        id: action.commentID\n      }, {\n        headers: {\n          'data-categ': 'answercorrect'\n        }\n      });\n    }\n\n    yield put(actions.ansCorrect(action.commentID, action.categ, action.replyID));\n  } catch (err) {\n    yield put(actions.fetchCntFail(err));\n    yield delay(1000);\n    yield put(actions.resetModel());\n  }\n}\nexport function* ansWrongInitSaga(action) {\n  try {\n    if (action.categ === 'reply') {\n      yield axios.patch('/view', {\n        id: action.commentID,\n        replyID: action.replyID\n      }, {\n        headers: {\n          'data-categ': 'answerwrongreply'\n        }\n      });\n    } else {\n      yield axios.patch('/view', {\n        id: action.commentID\n      }, {\n        headers: {\n          'data-categ': 'answerwrong'\n        }\n      });\n    }\n\n    yield put(actions.ansWrong(action.commentID, action.categ, action.replyID));\n  } catch (err) {\n    yield put(actions.fetchCntFail(err));\n    yield delay(1000);\n    yield put(actions.resetModel());\n  }\n}\nexport function* changeFavSaga(action) {\n  let updateFav = changeFav(action.id, action.liked, action.favAdd, action.changedFav);\n  yield put(actions.changeMainFavoriteStart(updateFav.favDet.liked));\n  yield put(actions.changeFavPtStart(updateFav.favDet.id, updateFav.favDet.liked));\n\n  try {\n    let field = action.cntGrp === 'post' ? 'postID' : action.cntGrp === 'question' ? 'queID' : 'pwtID';\n    yield axios.patch('/header', {\n      id: updateFav.favDet.id,\n      model: action.cntGrp,\n      field\n    }, {\n      headers: {\n        'data-categ': 'changefavorite'\n      }\n    });\n    yield delay(500);\n    yield put(actions.changeMainFavoriteReset());\n    yield put(actions.changeFav(updateFav.updateChangeFav));\n  } catch (err) {\n    yield delay(500);\n    yield put(actions.changeMainFavoriteReset());\n    yield put(actions.changeFavPtFail());\n  }\n}\nexport function* changeCntInitSaga(action) {\n  let field = action.modelType === 'post' ? 'postID' : action.modelType === 'question' ? 'queID' : 'pwtID';\n\n  if (!action.confirm) {\n    yield put(actions.changeCntStart(action.title, action.id, action.det, action.modelType));\n    return;\n  }\n\n  try {\n    if (action.det === 'delete') {\n      let payload = JSON.stringify({\n        id: action.id,\n        model: action.modelType,\n        field\n      });\n      yield axios.delete('/header', {\n        headers: {\n          'data-categ': `deletecnt-${payload}`\n        }\n      });\n    } else if (action.det === 'draft') {\n      yield axios.patch('/header', {\n        id: action.id,\n        model: action.modelType,\n        field\n      }, {\n        headers: {\n          'data-categ': 'draftmode'\n        }\n      });\n    } else {\n      yield axios.patch('/header', {\n        id: action.id,\n        model: action.modelType,\n        field\n      }, {\n        headers: {\n          'data-categ': 'publishmode'\n        }\n      });\n    }\n\n    yield put(actions.changeCnt());\n    yield delay(1000);\n    yield put(actions.changeCntReset(true));\n  } catch (err) {\n    yield put(actions.changeCntFail(err));\n    yield delay(1000);\n    yield put(actions.changeCntReset(false));\n  }\n}","map":null,"metadata":{},"sourceType":"module"}