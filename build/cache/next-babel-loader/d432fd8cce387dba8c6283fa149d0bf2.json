{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Users from '../../../../components/Main/Users/Users';\nimport Loader from '../../../../components/UI/Loader/Loader';\nimport NoAcc from '../../../../components/Main/NoAcc/NoAcc';\nimport * as actions from '../../../../store/actions/index';\nimport App from '../../../../App';\n\nclass Model extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onScroll\", () => {\n      if (false) {\n        if (document.documentElement.scrollHeight - document.documentElement.scrollTop === document.documentElement.clientHeight) {\n          this.props.onFetchCnt(this.props.userID, 'users', this.state.fetchLimit, this.props.skipCnt + this.state.fetchLimit, this.props.cntTotal);\n        }\n      }\n    });\n\n    _defineProperty(this, \"changeCntHandler\", (id, title, det, confirm, modelType) => {\n      this.props.onChangeCnt(id, title, det, confirm, modelType);\n    });\n\n    let limit = 0;\n\n    if (false) {\n      if (window.innerHeight >= 1200) {\n        limit = 18;\n      } else if (window.innerHeight >= 900) {\n        limit = 12;\n      } else if (window.innerHeight >= 500) {\n        limit = 9;\n      } else {\n        limit = 6;\n      }\n    }\n\n    this.state = {\n      fetchLimit: limit,\n      filterTag: 'users',\n      scrollEnable: false\n    };\n  }\n\n  componentDidMount() {// this.props.onFetchCnt(this.props.userID, this.state.filterTag, this.state.fetchLimit, 0, 0);\n    // this.props.onChangeTag('/users');\n  }\n\n  componentDidUpdate() {\n    if (this.props.cnts && this.props.cnts.length > 0 && !this.state.scrollEnable) {\n      window.addEventListener('scroll', this.onScroll, false);\n      this.setState({\n        scrollEnable: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.onFetchCntReset();\n    window.removeEventListener('scroll', this.onScroll, false);\n  }\n\n  render() {\n    this.props.onFetchShareActive();\n    this.props.onFetchCntActive();\n    this.props.onFetchShareCntActive();\n    this.props.onFetchNotifyActive();\n    this.props.onFetchPtActive();\n    this.props.onFetchQueActive();\n    this.props.onFetchReqActive();\n\n    let cnt = __jsx(Loader, null);\n\n    if (this.props.cntErr) {\n      cnt = null;\n    }\n\n    if (this.props.cnts && this.props.cnts.length === 0) {\n      cnt = __jsx(NoAcc, {\n        isAuth: this.props.status,\n        det: \"Users not found !!\",\n        icn: \"users\",\n        filter: true\n      });\n    }\n\n    if (this.props.cnts && this.props.cnts.length > 0) {\n      cnt = __jsx(Users, {\n        content: this.props.cnts,\n        changeCnt: this.changeCntHandler\n      });\n    }\n\n    return __jsx(App, null, cnt);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    status: state.auth.status,\n    cnts: state.cnt.cnts,\n    skipCnt: state.cnt.skipCnt,\n    cntTotal: state.cnt.cntTotal,\n    filterDet: state.cnt.filterDet,\n    cntErr: state.cnt.cntErr,\n    addUser: state.cnt.addUser,\n    pending: state.cnt.pending,\n    request: state.cnt.request,\n    blocked: state.cnt.blocked,\n    accept: state.cnt.accept\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchShareActive: () => dispatch(actions.fetchShareactiveInit()),\n    onFetchShareCntActive: () => dispatch(actions.fetchShareCntactiveInit()),\n    onFetchCntActive: () => dispatch(actions.fetchCntActiveInit()),\n    onFetchNotifyActive: () => dispatch(actions.fetchNotifyactiveInit()),\n    onFetchPtActive: () => dispatch(actions.fetchPtActiveInit()),\n    onFetchQueActive: () => dispatch(actions.fetchQueActiveInit()),\n    onFetchReqActive: () => dispatch(actions.fetchReqActiveInit()),\n    onFetchCnt: (userID, fetchType, limit, skipCnt, cntTotal) => dispatch(actions.fetchCntInit(userID, fetchType, limit, skipCnt, cntTotal)),\n    onFetchCntReset: () => dispatch(actions.fetchCntReset()),\n    onChangeTag: path => dispatch(actions.changeTagsPath(path)),\n    onChangeCnt: (id, title, det, confirm, modelType) => dispatch(actions.changeCntInit(id, title, det, confirm, modelType))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Model);","map":null,"metadata":{},"sourceType":"module"}