{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAuth),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchHeader),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchForm),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchMain),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { takeEvery, all } from 'redux-saga/effects';\nimport * as actionTypes from '../../store/actions/actionTypes';\nimport { checkAuthInitSaga } from './auth';\nimport { fetchNotifyInitSaga, changeFavNotifySaga, fetchNavlistInitSaga, fetchNotifyActiveInitSaga, defaultNotifyActiveInitSaga, headerFilterInitSaga } from './header';\nimport { fetchShareActiveInitSaga, resetActiveInitSaga } from './main';\nimport { fetchCategInitSaga, addCategInitSaga, checkLinkInitSaga, fetchUsersInitSaga, filterUserInitSaga, showUserSelectInitSaga } from './form';\nexport function watchAuth() {\n  return _regeneratorRuntime.wrap(function watchAuth$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([takeEvery(actionTypes.CHECK_AUTH_INIT, checkAuthInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\nexport function watchHeader() {\n  return _regeneratorRuntime.wrap(function watchHeader$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return all([takeEvery(actionTypes.FETCH_NOTIFY_INIT, fetchNotifyInitSaga), takeEvery(actionTypes.CHANGE_FAVORITE_NOTIFY_INIT, changeFavNotifySaga), takeEvery(actionTypes.FETCH_NAVLIST_INIT, fetchNavlistInitSaga), takeEvery(actionTypes.FETCH_NOTIFY_ACTIVE_INIT, fetchNotifyActiveInitSaga), takeEvery(actionTypes.DEFAULT_NOTIFYACTIVE_INIT, defaultNotifyActiveInitSaga), takeEvery(actionTypes.FETCH_SHARE_ACTIVE_INIT, fetchShareActiveInitSaga), takeEvery(actionTypes.HEADER_FILTER_INIT, headerFilterInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\nexport function watchForm() {\n  return _regeneratorRuntime.wrap(function watchForm$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([takeEvery(actionTypes.FETCH_CATEG_INIT, fetchCategInitSaga), takeEvery(actionTypes.ADD_CATEG_INIT, addCategInitSaga), takeEvery(actionTypes.CHECK_LINK_INIT, checkLinkInitSaga), takeEvery(actionTypes.FETCH_USERS_INIT, fetchUsersInitSaga), takeEvery(actionTypes.FILTER_USER_INIT, filterUserInitSaga), takeEvery(actionTypes.SHOW_USER_SELECT_INIT, showUserSelectInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\nexport function watchMain() {\n  return _regeneratorRuntime.wrap(function watchMain$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([takeEvery(actionTypes.FETCH_SHARE_ACTIVE_INIT, fetchShareActiveInitSaga), takeEvery(actionTypes.RESET_ACTIVE_INIT, resetActiveInitSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\nexport function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([watchAuth(), watchHeader(), watchForm(), watchMain()]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":null,"metadata":{},"sourceType":"module"}