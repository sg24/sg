{"ast":null,"code":"import { put, delay } from 'redux-saga/effects';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nimport fileAxios from 'axios';\nexport function* fetchCategInitSaga(action) {\n  try {\n    yield put(actions.fetchCategStart());\n    const category = yield axios.post('/post', null, {\n      headers: {\n        'data-categ': 'postCateg'\n      }\n    });\n    const categ = category.data && category.data.length > 0 ? category.data : null;\n    yield put(actions.fetchCateg(categ));\n  } catch (err) {\n    yield put(actions.fetchCategFail(err));\n    yield delay(2000);\n    yield put(actions.fetchCategReset());\n  }\n}\nexport function* addCategInitSaga(action) {\n  let categs = String(action.categ).split(',');\n  let transformCateg = [];\n\n  for (let categ of categs) {\n    transformCateg.push(String(categ).trim().charAt(0).toUpperCase() + String(categ).trim().toLowerCase().slice(1));\n  }\n\n  let removeDuplicate = [...new Set(transformCateg)];\n  yield put(actions.addCateg(removeDuplicate));\n}\nexport function* checkLinkInitSaga(action) {\n  let link = String(action.link).trim();\n\n  try {\n    let response = yield fileAxios.get(link, {\n      responseType: 'blob',\n      timeout: 8000\n    });\n\n    if (response.data.type.startsWith(action.mediaType + '/')) {\n      yield put(actions.checkLink(null, {\n        file: response.data,\n        url: window.URL.createObjectURL(response.data)\n      }));\n      return;\n    }\n\n    throw new Error(`Unknown format, Only ${action.mediaType} files`);\n  } catch (err) {\n    yield put(actions.checkLink(err, null));\n  }\n}\nexport function* fetchUsersInitSaga(action) {\n  try {\n    let response = yield axios.post('/users', null, {\n      headers: {\n        'data-categ': `allteacher-${action.userStatus}`\n      }\n    });\n    yield put(actions.fetchUsers(response.data, action.userStatus));\n  } catch (err) {\n    yield put(actions.fetchUsersFail(err));\n  }\n}\nexport function* filterUserInitSaga(action) {\n  let filterUser = action.users.filter(user => user.username.toLowerCase().indexOf(action.filterContent.toLowerCase()) !== -1);\n\n  if (!action.filterContent && action.users && action.users.length > 0) {\n    filterUser = [...action.users];\n  }\n\n  yield put(actions.filterUser(filterUser));\n}\nexport function* showUserSelectInitSaga(action) {\n  let filterUser = action.users.filter(user => action.userID.indexOf(user.id) !== -1);\n  yield put(actions.showUserSelect(filterUser));\n}","map":null,"metadata":{},"sourceType":"module"}