{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../../shared/utility';\nconst initialState = {\n  cnts: null,\n  cntErr: null,\n  skipCnt: null,\n  showLoader: false,\n  changedFav: [],\n  favChange: null,\n  postVideo: {\n    id: null\n  },\n  videoErr: null,\n  filterDet: null,\n  changeCnt: false,\n  changeCntErr: null,\n  changeCntStart: null,\n  comments: [],\n  submitStart: false,\n  resetInput: false,\n  commentID: null,\n  commentTotal: 0\n};\n\nconst fetchCnt = (state, action) => {\n  let comments = [...state.comments];\n  comments.push(...action.cnt.commentcnt);\n  return updateObject(state, {\n    cnts: action.cnt,\n    comments,\n    commentTotal: action.cnt.comment\n  });\n};\n\nconst fetchCntReset = (state, action) => {\n  return updateObject(state, {\n    cnts: null,\n    comments: []\n  });\n};\n\nconst fetchCntStart = (state, action) => {\n  return updateObject(state, {\n    showLoader: true\n  });\n};\n\nconst fetchPostFail = (state, action) => {\n  return updateObject(state, {\n    cntErr: action.err,\n    showLoader: false\n  });\n};\n\nconst submitComment = (state, action) => {\n  let comments = [...state.comments];\n\n  if (action.categ === 'reply') {\n    let indexPos;\n    let commentReply = comments.filter((comment, index) => {\n      if (comment._id === action.id) {\n        indexPos = index;\n        return true;\n      }\n\n      return false;\n    });\n\n    let comment = _objectSpread({}, commentReply[0]);\n\n    if (comment.reply) {\n      comment.reply.push(_objectSpread({}, action.cnt));\n    } else {\n      comment['reply'] = [_objectSpread({}, action.cnt)];\n    }\n\n    comments[indexPos] = comment;\n    return updateObject(state, {\n      comments,\n      submitStart: false,\n      resetInput: true,\n      commentTotal: state.commentTotal += 1\n    });\n  }\n\n  comments.push(action.cnt);\n  return updateObject(state, {\n    comments,\n    submitStart: false,\n    resetInput: true,\n    commentTotal: state.commentTotal += 1\n  });\n};\n\nconst submitCommentFail = (state, action) => {\n  return updateObject(state, {\n    cntErr: action.err,\n    submitStart: false\n  });\n};\n\nconst submitCommentStart = (state, action) => {\n  return updateObject(state, {\n    submitStart: true\n  });\n};\n\nconst resetInput = (state, action) => {\n  return updateObject(state, {\n    resetInput: false,\n    commentID: null\n  });\n};\n\nconst resetModel = (state, action) => {\n  return updateObject(state, {\n    cntErr: null,\n    changeCntStart: null,\n    changeCntErr: null,\n    changeCnt: false\n  });\n};\n\nconst ansCorrect = (state, action) => {\n  let comments = [...state.comments];\n  let indexPos;\n  let comment = comments.filter((comment, index) => {\n    if (comment._id === action.commentID) {\n      indexPos = index;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (action.categ === 'smilereply') {\n    let replyPos;\n    let reply = comment[0].reply.filter((replyRes, index) => {\n      if (replyRes._id === action.replyID) {\n        replyPos = index;\n        return true;\n      }\n\n      return false;\n    });\n    reply[0].smiled = reply[0].smile ? reply[0].smiled - 1 : reply[0].smiled + 1;\n    reply[0].smile = !reply[0].smile;\n    comment[0].reply[replyPos] = reply[0];\n    comments[indexPos] = comment[0];\n    return updateObject(state, {\n      comments\n    });\n  }\n\n  if (action.categ === 'reply') {\n    let replyPos;\n    let reply = comment[0].reply.filter((replyRes, index) => {\n      if (replyRes._id === action.replyID) {\n        replyPos = index;\n        return true;\n      }\n\n      return false;\n    });\n    reply[0].liked = reply[0].like ? reply[0].liked : reply[0].liked + 1;\n    reply[0].disliked = reply[0].dislike ? reply[0].disliked - 1 : reply[0].disliked;\n    reply[0].like = true;\n    reply[0].dislike = false;\n    comment[0].reply[replyPos] = reply[0];\n    comments[indexPos] = comment[0];\n    return updateObject(state, {\n      comments\n    });\n  }\n\n  if (action.categ === 'smile') {\n    comment[0].smiled = comment[0].smile ? comment[0].smiled - 1 : comment[0].smiled + 1;\n    comment[0].smile = !comment[0].smile;\n    comments[indexPos] = comment[0];\n    return updateObject(state, {\n      comments\n    });\n  }\n\n  comment[0].liked = comment[0].like ? comment[0].liked : comment[0].liked + 1;\n  comment[0].disliked = comment[0].dislike ? comment[0].disliked - 1 : comment[0].disliked;\n  comment[0].like = true;\n  comment[0].dislike = false;\n  comments[indexPos] = comment[0];\n  return updateObject(state, {\n    comments\n  });\n};\n\nconst ansWrong = (state, action) => {\n  let comments = [...state.comments];\n  let indexPos;\n  let comment = comments.filter((comment, index) => {\n    if (comment._id === action.commentID) {\n      indexPos = index;\n      return true;\n    }\n\n    return false;\n  });\n\n  if (action.categ === 'reply') {\n    let replyPos;\n    let reply = comment[0].reply.filter((replyRes, index) => {\n      if (replyRes._id === action.replyID) {\n        replyPos = index;\n        return true;\n      }\n\n      return false;\n    });\n    reply[0].disliked = reply[0].dislike ? reply[0].disliked : reply[0].disliked + 1;\n    reply[0].liked = reply[0].like ? reply[0].liked - 1 : reply[0].liked;\n    reply[0].dislike = true;\n    reply[0].like = false;\n    comment[0].reply[replyPos] = reply[0];\n    comments[indexPos] = comment[0];\n    return updateObject(state, {\n      comments\n    });\n  }\n\n  comment[0].disliked = comment[0].dislike ? comment[0].disliked : comment[0].disliked + 1;\n  comment[0].liked = comment[0].like ? comment[0].liked - 1 : comment[0].liked;\n  comment[0].dislike = true;\n  comment[0].like = false;\n  comments[indexPos] = comment[0];\n  return updateObject(state, {\n    comments\n  });\n};\n\nconst changeCntStart = (state, action) => {\n  return updateObject(state, {\n    changeCntStart: {\n      title: action.title,\n      id: action.id,\n      det: action.det,\n      modelType: action.modelType\n    },\n    changeCntErr: null\n  });\n};\n\nconst changeCntCancel = (state, action) => {\n  return updateObject(state, {\n    changeCntStart: null,\n    changeCntErr: null,\n    changeCnt: false\n  });\n};\n\nconst changeCntReset = (state, action) => {\n  let cnts = _objectSpread({}, state.cnts);\n\n  if ((state.changeCntStart.det === 'publish' || state.changeCntStart.det === 'draft') && state.changeCntStart.det !== 'delete') {\n    cnts.mode = state.changeCntStart.det;\n    return updateObject(state, {\n      cnts: action.changed ? cnts : state.cnts,\n      changeCntStart: null,\n      changeCntErr: null,\n      changeCnt: false\n    });\n  }\n\n  return updateObject(state, {\n    cnts,\n    changeCntStart: null,\n    changeCntErr: null,\n    changeCnt: false\n  });\n};\n\nconst changeCntFail = (state, action) => {\n  return updateObject(state, {\n    changeCntErr: action.err\n  });\n};\n\nconst changeCnt = (state, action) => {\n  return updateObject(state, {\n    changeCnt: true\n  });\n};\n\nconst fetchVideo = (state, action) => {\n  return updateObject(state, {\n    postVideo: {\n      id: action.id,\n      url: action.url\n    }\n  });\n};\n\nconst changeFavPtStart = (state, action) => {\n  return updateObject(state, {\n    favChange: {\n      id: action.id,\n      isLiked: action.isLiked\n    }\n  });\n};\n\nconst changeFavPtFail = (state, action) => {\n  return updateObject(state, {\n    favChange: null\n  });\n};\n\nconst changeFav = (state, action) => {\n  return updateObject(state, {\n    changedFav: action.changedFav,\n    favChange: null\n  });\n};\n\nconst filterPost = (state, action) => {\n  return updateObject(state, {\n    filterDet: action.filterDet\n  });\n};\n\nconst setCommentID = (state, action) => {\n  return updateObject(state, {\n    commentID: {\n      id: action.commentID,\n      categ: action.categ\n    }\n  });\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_CNT:\n      return fetchCnt(state, action);\n\n    case actionTypes.FETCH_CNT_START:\n      return fetchCntStart(state, action);\n\n    case actionTypes.FETCH_CNT_RESET:\n      return fetchCntReset(state, action);\n\n    case actionTypes.FETCH_CNT_FAIL:\n      return fetchPostFail(state, action);\n\n    case actionTypes.SUBMIT_COMMENT:\n      return submitComment(state, action);\n\n    case actionTypes.SUBMIT_COMMENT_START:\n      return submitCommentStart(state, action);\n\n    case actionTypes.SUBMIT_COMMENT_FAIL:\n      return submitCommentFail(state, action);\n\n    case actionTypes.RESET_INPUT:\n      return resetInput(state, action);\n\n    case actionTypes.RESET_MODEL:\n      return resetModel(state, action);\n\n    case actionTypes.ANS_CORRECT:\n      return ansCorrect(state, action);\n\n    case actionTypes.ANS_WRONG:\n      return ansWrong(state, action);\n\n    case actionTypes.CHANGE_CNT_START:\n      return changeCntStart(state, action);\n\n    case actionTypes.CHANGE_CNT_CANCEL:\n      return changeCntCancel(state, action);\n\n    case actionTypes.CHANGE_CNT_RESET:\n      return changeCntReset(state, action);\n\n    case actionTypes.CHANGE_CNT_FAIL:\n      return changeCntFail(state, action);\n\n    case actionTypes.CHANGE_CNT:\n      return changeCnt(state, action);\n\n    case actionTypes.FETCH_VIDEO:\n      return fetchVideo(state, action);\n\n    case actionTypes.CHANGE_FAVORITE:\n      return changeFav(state, action);\n\n    case actionTypes.CHANGE_FAVORITE_PT_START:\n      return changeFavPtStart(state, action);\n\n    case actionTypes.CHANGE_FAVORITE_PT_FAIL:\n      return changeFavPtFail(state, action);\n\n    case actionTypes.FILTER_POST:\n      return filterPost(state, action);\n\n    case actionTypes.SET_COMMENTID:\n      return setCommentID(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}