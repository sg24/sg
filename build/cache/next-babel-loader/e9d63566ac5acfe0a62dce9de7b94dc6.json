{"ast":null,"code":"import _getIterator from \"@babel/runtime-corejs2/core-js/get-iterator\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCntInitSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchCategInitSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addCategInitSaga),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(checkLinkInitSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(fetchUsersInitSaga),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(filterUserInitSaga),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(showUserSelectInitSaga);\n\nimport { put, delay } from 'redux-saga/effects';\nimport * as actions from '../../store/actions/index';\nimport axios from '../../axios';\nimport fileAxios from 'axios';\nexport function fetchCntInitSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchCntInitSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return axios.post('/header', {\n            id: action.id,\n            model: 'poet'\n          }, {\n            headers: {\n              'data-categ': \"editform\"\n            }\n          });\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return put(actions.fetchCnt(response.data));\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put(actions.fetchCntFail(_context.t0));\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\nexport function fetchCategInitSaga(action) {\n  var category, categ;\n  return _regeneratorRuntime.wrap(function fetchCategInitSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return put(actions.fetchCategStart());\n\n        case 3:\n          _context2.next = 5;\n          return axios.post('/poet', null, {\n            headers: {\n              'data-categ': 'category'\n            }\n          });\n\n        case 5:\n          category = _context2.sent;\n          categ = category.data && category.data.length > 0 ? category.data : null;\n          _context2.next = 9;\n          return put(actions.fetchCateg(categ));\n\n        case 9:\n          _context2.next = 19;\n          break;\n\n        case 11:\n          _context2.prev = 11;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 15;\n          return put(actions.fetchCategFail(_context2.t0));\n\n        case 15:\n          _context2.next = 17;\n          return delay(2000);\n\n        case 17:\n          _context2.next = 19;\n          return put(actions.fetchCategReset());\n\n        case 19:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 11]]);\n}\nexport function addCategInitSaga(action) {\n  var categs, transformCateg, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, categ, removeDuplicate;\n\n  return _regeneratorRuntime.wrap(function addCategInitSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          categs = String(action.categ).split(',');\n          transformCateg = [];\n          _iteratorNormalCompletion = true;\n          _didIteratorError = false;\n          _iteratorError = undefined;\n          _context3.prev = 5;\n\n          for (_iterator = _getIterator(categs); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            categ = _step.value;\n            transformCateg.push(String(categ).trim().charAt(0).toUpperCase() + String(categ).trim().toLowerCase().slice(1));\n          }\n\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](5);\n          _didIteratorError = true;\n          _iteratorError = _context3.t0;\n\n        case 13:\n          _context3.prev = 13;\n          _context3.prev = 14;\n\n          if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n            _iterator[\"return\"]();\n          }\n\n        case 16:\n          _context3.prev = 16;\n\n          if (!_didIteratorError) {\n            _context3.next = 19;\n            break;\n          }\n\n          throw _iteratorError;\n\n        case 19:\n          return _context3.finish(16);\n\n        case 20:\n          return _context3.finish(13);\n\n        case 21:\n          removeDuplicate = _toConsumableArray(new _Set(transformCateg));\n          _context3.next = 24;\n          return put(actions.addCateg(removeDuplicate));\n\n        case 24:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[5, 9, 13, 21], [14,, 16, 20]]);\n}\nexport function checkLinkInitSaga(action) {\n  var link, response;\n  return _regeneratorRuntime.wrap(function checkLinkInitSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          link = String(action.link).trim();\n          _context4.prev = 1;\n          _context4.next = 4;\n          return fileAxios.get(link, {\n            responseType: 'blob',\n            timeout: 8000\n          });\n\n        case 4:\n          response = _context4.sent;\n\n          if (!response.data.type.startsWith(action.mediaType + '/')) {\n            _context4.next = 9;\n            break;\n          }\n\n          _context4.next = 8;\n          return put(actions.checkLink(null, {\n            file: response.data,\n            url: window.URL.createObjectURL(response.data)\n          }));\n\n        case 8:\n          return _context4.abrupt(\"return\");\n\n        case 9:\n          throw new Error(\"Unknown format, Only \".concat(action.mediaType, \" files\"));\n\n        case 12:\n          _context4.prev = 12;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 16;\n          return put(actions.checkLink(_context4.t0, null));\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 12]]);\n}\nexport function fetchUsersInitSaga(action) {\n  var response;\n  return _regeneratorRuntime.wrap(function fetchUsersInitSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return axios.post('/users', null, {\n            headers: {\n              'data-categ': \"allteacher-\".concat(action.userStatus)\n            }\n          });\n\n        case 3:\n          response = _context5.sent;\n          _context5.next = 6;\n          return put(actions.fetchUsers(response.data, action.userStatus));\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put(actions.fetchUsersFail(_context5.t0));\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\nexport function filterUserInitSaga(action) {\n  var filterUser;\n  return _regeneratorRuntime.wrap(function filterUserInitSaga$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          filterUser = action.users.filter(function (user) {\n            return user.username.toLowerCase().indexOf(action.filterContent.toLowerCase()) !== -1;\n          });\n\n          if (!action.filterContent && action.users && action.users.length > 0) {\n            filterUser = _toConsumableArray(action.users);\n          }\n\n          _context6.next = 4;\n          return put(actions.filterUser(filterUser));\n\n        case 4:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\nexport function showUserSelectInitSaga(action) {\n  var filterUser;\n  return _regeneratorRuntime.wrap(function showUserSelectInitSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          filterUser = action.users.filter(function (user) {\n            return action.userID.indexOf(user.id) !== -1;\n          });\n          _context7.next = 3;\n          return put(actions.showUserSelect(filterUser));\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":null,"metadata":{},"sourceType":"module"}