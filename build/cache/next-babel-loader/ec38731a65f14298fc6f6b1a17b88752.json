{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { withRouter } from 'next/router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../../store/actions/index';\nimport TrendItems from '../../../../components/Main/Nav/TrendItems/TrendItems';\nimport Loader from '../../../../components/UI/Loader/Loader';\n\nclass TopTrending extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"changeFavoriteHandler\", (id, isLiked, favAdd, cntGrp) => {\n      this.props.onChangeFav(id, isLiked, favAdd, this.props.changedFav, this.props.userID, cntGrp);\n    });\n\n    _defineProperty(this, \"showTrendHandler\", () => {\n      this.props.onShowTrend();\n    });\n  }\n\n  componentDidMount() {// this.props.onFetchTrends(this.props.match.params.categ,  this.props.match.params.id);\n  }\n\n  componentDidUpdate() {\n    if (this.props.show) {\n      this.props.onFetchTrends(this.props.match.params.categ, this.props.match.params.id);\n    }\n  }\n\n  render() {\n    let trends = __jsx(Loader, null);\n\n    if (this.props.trd) {\n      trends = __jsx(TrendItems, {\n        content: this.props.trd,\n        fav: this.changeFavoriteHandler,\n        changedFav: this.props.changedFav,\n        favChange: this.props.favChange,\n        show: this.showTrendHandler\n      });\n    }\n\n    return __jsx(\"div\", {\n      className: \"reuse-trd reuse-trd__nav\"\n    }, __jsx(\"h3\", null, \" Related Topics \"), __jsx(\"div\", {\n      className: \"reuse-trd__cnt reuse-trd__cnt--nav\"\n    }, trends));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    trd: state.trd.trends,\n    changedFav: state.cnt.changedFav,\n    favChange: state.cnt.favChange,\n    userID: state.auth.userID,\n    show: state.trd.show\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onFetchTrends: (cntGrp, id) => dispatch(actions.fetchTrdInit(cntGrp, id)),\n    onChangeFav: (id, liked, favAdd, changedFav, userID, cntGrp) => dispatch(actions.changeFavInit(id, liked, favAdd, changedFav, userID, cntGrp)),\n    onShowTrend: () => dispatch(actions.showTrd())\n  };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(TopTrending));","map":null,"metadata":{},"sourceType":"module"}